#!/usr/bin/env python3
"""
NIMDA-Mac Enhanced Launcher
–ì–æ–ª–æ–≤–Ω–∏–π –ª–∞—É–Ω—á–µ—Ä –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –±–µ–∑–ø–µ–∫–∏ NIMDA –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –®–Ü
"""

import os
import sys
import argparse
import subprocess
from datetime import datetime

def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    required_packages = [
        'tkinter', 'psutil', 'requests', 'sqlite3'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏: {', '.join(missing_packages)}")
        print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö –∫–æ–º–∞–Ω–¥–æ—é: pip install -r requirements.txt")
        return False
    
    return True

def launch_gui():
    """–ó–∞–ø—É—Å–∫–∞—î –≥—Ä–∞—Ñ—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    print("üñ•Ô∏è –ó–∞–ø—É—Å–∫ GUI...")
    gui_path = os.path.join(os.path.dirname(__file__), 'gui', 'nimda_gui.py')
    
    if os.path.exists(gui_path):
        subprocess.run([sys.executable, gui_path])
    else:
        print(f"‚ùå GUI —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {gui_path}")

def launch_demo():
    """–ó–∞–ø—É—Å–∫–∞—î –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é"""
    print("üéØ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó...")
    demo_path = os.path.join(os.path.dirname(__file__), 'nimda_enhanced_demo.py')
    
    if os.path.exists(demo_path):
        subprocess.run([sys.executable, demo_path])
    else:
        print(f"‚ùå –î–µ–º–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {demo_path}")

def update_rules():
    """–û–Ω–æ–≤–ª—é—î –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–ø–µ–∫–∏"""
    print("üì• –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –±–µ–∑–ø–µ–∫–∏...")
    try:
        sys.path.append(os.path.dirname(__file__))
        from core.rule_manager import RuleManager
        
        manager = RuleManager()
        success_count = manager.update_all_rules()
        print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ {success_count} –Ω–∞–±–æ—Ä—ñ–≤ –ø—Ä–∞–≤–∏–ª")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        rules = manager.load_rules()
        parsed_rules = manager.get_parsed_rules()
        print(f"üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(rules)} –ø—Ä–∞–≤–∏–ª, —Ä–æ–∑–ø–∞—Ä—à–µ–Ω–æ {len(parsed_rules)}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª: {e}")

def check_ai_status():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –®–Ü"""
    print("ü§ñ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –®–Ü...")
    try:
        sys.path.append(os.path.dirname(__file__))
        from llm_security_agent import LLMSecurityAgent
        
        agent = LLMSecurityAgent()
        if agent.check_ollama_connection():
            models = agent.get_available_models()
            print("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–Ω–∞")
            if models:
                print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ: {', '.join(models)}")
            else:
                print("‚ö†Ô∏è –ú–æ–¥–µ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            print("üí° –ó–∞–ø—É—Å—Ç—ñ—Ç—å Ollama –∫–æ–º–∞–Ω–¥–æ—é: ollama serve")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –®–Ü: {e}")

def run_security_scan():
    """–ó–∞–ø—É—Å–∫–∞—î —à–≤–∏–¥–∫–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏"""
    print("üîç –®–≤–∏–¥–∫–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏...")
    try:
        sys.path.append(os.path.dirname(__file__))
        from security_monitor import SecurityMonitor
        
        monitor = SecurityMonitor()
        
        # –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
        downloads = monitor.monitor_suspicious_downloads()
        print(f"üìÇ –ù–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ —É Downloads: {len(downloads)}")
        
        if downloads:
            suspicious_count = sum(1 for f in downloads if f['suspicious'])
            print(f"‚ö†Ô∏è –ü—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö —Ñ–∞–π–ª—ñ–≤: {suspicious_count}")
        
        # –ê–Ω–∞–ª—ñ–∑ –∫–æ–º–∞–Ω–¥
        suspicious_commands = monitor.analyze_command_history_for_threats()
        print(f"üíª –ü—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –∫–æ–º–∞–Ω–¥: {len(suspicious_commands)}")
        
        if suspicious_commands:
            high_risk = sum(1 for c in suspicious_commands if c['risk_level'] == 'high')
            print(f"üö® –í–∏—Å–æ–∫–æ–≥–æ —Ä–∏–∑–∏–∫—É: {high_risk}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ
        integrity = monitor.monitor_file_integrity()
        print(f"üîí –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {len(integrity)}")
        
        print("‚úÖ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")

def show_system_info():
    """–ü–æ–∫–∞–∑—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É"""
    print("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É NIMDA-Mac")
    print("=" * 50)
    
    # –í–µ—Ä—Å—ñ—è Python
    print(f"üêç Python: {sys.version}")
    
    # –®–ª—è—Ö –¥–æ —Å–∫—Ä–∏–ø—Ç–∞
    script_dir = os.path.dirname(os.path.abspath(__file__))
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {script_dir}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤
    key_files = [
        'core/rule_manager.py',
        'core/threat_analyzer.py',
        'gui/nimda_gui.py',
        'security_monitor.py',
        'llm_security_agent.py'
    ]
    
    print("\nüìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Å–∏—Å—Ç–µ–º–∏:")
    for file_path in key_files:
        full_path = os.path.join(script_dir, file_path)
        status = "‚úÖ" if os.path.exists(full_path) else "‚ùå"
        print(f"  {status} {file_path}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–ø–æ–∫
    print("\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
    for folder in ['core', 'gui', 'configs', 'data', 'rules']:
        folder_path = os.path.join(script_dir, folder)
        status = "‚úÖ" if os.path.exists(folder_path) else "‚ùå"
        print(f"  {status} {folder}/")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ª–∞—É–Ω—á–µ—Ä–∞"""
    parser = argparse.ArgumentParser(
        description="NIMDA-Mac Enhanced Security System",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
  python launch.py gui              # –ó–∞–ø—É—Å–∫ GUI
  python launch.py demo             # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
  python launch.py update-rules     # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª
  python launch.py check-ai         # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –®–Ü
  python launch.py scan             # –®–≤–∏–¥–∫–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
  python launch.py info             # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É
        """
    )
    
    parser.add_argument(
        'command',
        choices=['gui', 'demo', 'update-rules', 'check-ai', 'scan', 'info'],
        help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è'
    )
    
    args = parser.parse_args()
    
    print("üõ°Ô∏è NIMDA-Mac Enhanced Security System")
    print(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    if not check_dependencies():
        return 1
    
    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
    try:
        if args.command == 'gui':
            launch_gui()
        elif args.command == 'demo':
            launch_demo()
        elif args.command == 'update-rules':
            update_rules()
        elif args.command == 'check-ai':
            check_ai_status()
        elif args.command == 'scan':
            run_security_scan()
        elif args.command == 'info':
            show_system_info()
            
    except KeyboardInterrupt:
        print("\nüõë –û–ø–µ—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
