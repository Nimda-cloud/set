#!/usr/bin/env python3
"""
Enhanced NIMDA-Mac GUI with Human-in-the-Loop AI Integration
–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π GUI –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –®–Ü —Ç–∞ –ª—é–¥—Å—å–∫–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import subprocess
import os
import sys
from datetime import datetime
from typing import Dict, Optional, Any
import psutil

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –∫–æ—Ä–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.threat_analyzer import ThreatAnalyzer
from llm_security_agent import LLMSecurityAgent
from security_monitor import SecurityMonitor

class AIAssistantTab:
    """
    –í–∫–ª–∞–¥–∫–∞ –®–Ü-–ø–æ–º—ñ—á–Ω–∏–∫–∞ –∑ Human-in-the-Loop —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—é
    """
    
    def __init__(self, parent_notebook, threat_analyzer: ThreatAnalyzer):
        self.parent = parent_notebook
        self.threat_analyzer = threat_analyzer
        self.llm_agent = LLMSecurityAgent()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∫–ª–∞–¥–∫—É
        self.frame = ttk.Frame(parent_notebook)
        parent_notebook.add(self.frame, text="ü§ñ AI Assistant")
        
        self.create_ai_assistant_interface()
        
    def create_ai_assistant_interface(self):
        """–°—Ç–≤–æ—Ä—é—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –®–Ü-–ø–æ–º—ñ—á–Ω–∏–∫–∞"""
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.frame)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –°–µ–∫—Ü—ñ—è —Å—Ç–∞—Ç—É—Å—É –®–Ü
        status_frame = ttk.LabelFrame(main_frame, text="üîå AI Status")
        status_frame.pack(fill="x", pady=(0, 10))
        
        self.ai_status_label = ttk.Label(status_frame, text="–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è...")
        self.ai_status_label.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
        ttk.Button(status_frame, text="–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", 
                  command=self.update_ai_status).pack(pady=5)
        
        # –°–µ–∫—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ—Ü–µ—Å—ñ–≤
        process_frame = ttk.LabelFrame(main_frame, text="üîç Process Analysis")
        process_frame.pack(fill="both", expand=True, pady=(0, 10))
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—ñ–≤
        self.create_process_list(process_frame)
        
        # –°–µ–∫—Ü—ñ—è –®–Ü —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        ai_frame = ttk.LabelFrame(process_frame, text="üß† AI Recommendations")
        ai_frame.pack(fill="x", padx=5, pady=5)
        
        self.ai_suggestion_label = ttk.Label(ai_frame, text="–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ—Å —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é'")
        self.ai_suggestion_label.pack(pady=5)
        
        # –ü–æ–ª–µ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏
        command_frame = ttk.Frame(ai_frame)
        command_frame.pack(fill="x", padx=5, pady=5)
        
        ttk.Label(command_frame, text="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞:").pack(anchor="w")
        self.ai_command_entry = ttk.Entry(command_frame, width=80, font=("Courier", 10))
        self.ai_command_entry.pack(fill="x", pady=2)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        button_frame = ttk.Frame(ai_frame)
        button_frame.pack(fill="x", pady=5)
        
        ttk.Button(button_frame, text="üéØ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é", 
                  command=self.get_ai_suggestion).pack(side="left", padx=5)
        
        ttk.Button(button_frame, text="‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É", 
                  command=self.execute_ai_command).pack(side="left", padx=5)
        
        ttk.Button(button_frame, text="üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏", 
                  command=self.copy_command).pack(side="left", padx=5)
        
        # –°–µ–∫—Ü—ñ—è –ª–æ–≥—ñ–≤ –®–Ü
        log_frame = ttk.LabelFrame(main_frame, text="üìú AI Analysis Log")
        log_frame.pack(fill="both", expand=True)
        
        self.ai_log = scrolledtext.ScrolledText(log_frame, height=10, font=("Courier", 9))
        self.ai_log.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å
        self.update_ai_status()
        
    def create_process_list(self, parent):
        """–°—Ç–≤–æ—Ä—é—î —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—ñ–≤"""
        list_frame = ttk.Frame(parent)
        list_frame.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(list_frame, text="–ê–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ—Ü–µ—Å–∏:").pack(anchor="w")
        
        # Treeview –¥–ª—è –ø—Ä–æ—Ü–µ—Å—ñ–≤
        columns = ("PID", "Name", "User", "CPU%", "Memory%", "Status")
        self.processes_tree = ttk.Treeview(list_frame, columns=columns, show="headings", height=8)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.processes_tree.heading(col, text=col)
            self.processes_tree.column(col, width=100)
        
        # –°–∫—Ä–æ–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(list_frame, orient="vertical", command=self.processes_tree.yview)
        self.processes_tree.configure(yscrollcommand=scrollbar.set)
        
        # –ü–∞–∫—É–≤–∞–Ω–Ω—è
        self.processes_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—ñ–≤
        ttk.Button(list_frame, text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏", 
                  command=self.refresh_processes).pack(pady=5)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ—Ü–µ—Å–∏
        self.refresh_processes()
        
    def refresh_processes(self):
        """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—ñ–≤"""
        try:
            # –û—á–∏—â—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫
            for item in self.processes_tree.get_children():
                self.processes_tree.delete(item)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ—Ü–µ—Å–∏
            for proc in psutil.process_iter(['pid', 'name', 'username', 'cpu_percent', 'memory_percent', 'status']):
                try:
                    info = proc.info
                    self.processes_tree.insert("", "end", values=(
                        info['pid'],
                        info['name'][:20],  # –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ–≤–≥—ñ —ñ–º–µ–Ω–∞
                        info['username'][:15] if info['username'] else 'N/A',
                        f"{info['cpu_percent']:.1f}",
                        f"{info['memory_percent']:.1f}",
                        info['status']
                    ))
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
                    
        except Exception as e:
            self.log_ai_message(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—ñ–≤: {e}", "ERROR")
    
    def get_selected_process_info(self) -> Optional[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–±—Ä–∞–Ω–∏–π –ø—Ä–æ—Ü–µ—Å"""
        try:
            selected_items = self.processes_tree.selection()
            if not selected_items:
                messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ—Å –∑—ñ —Å–ø–∏—Å–∫—É.")
                return None
            
            item = self.processes_tree.item(selected_items[0])
            values = item['values']
            
            pid = int(values[0])
            name = values[1]
            user = values[2]
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ—Ü–µ—Å
            try:
                proc = psutil.Process(pid)
                return {
                    'pid': pid,
                    'name': name,
                    'user': user,
                    'path': proc.exe() if hasattr(proc, 'exe') else 'N/A',
                    'cmdline': ' '.join(proc.cmdline()) if hasattr(proc, 'cmdline') else 'N/A',
                    'create_time': proc.create_time() if hasattr(proc, 'create_time') else 0
                }
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                return {
                    'pid': pid,
                    'name': name,
                    'user': user,
                    'path': 'N/A',
                    'cmdline': 'N/A',
                    'create_time': 0
                }
                
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ—Ü–µ—Å: {e}")
            return None
    
    def get_ai_suggestion(self):
        """–û—Ç—Ä–∏–º—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é –≤—ñ–¥ –®–Ü –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É"""
        process_info = self.get_selected_process_info()
        if not process_info:
            return
        
        self.ai_suggestion_label.config(text="ü§î –ê–Ω–∞–ª—ñ–∑—É—é –ø—Ä–æ—Ü–µ—Å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –®–Ü...")
        self.ai_command_entry.delete(0, tk.END)
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑ —É –≤—ñ–¥–æ–∫—Ä–µ–º–ª–µ–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        thread = threading.Thread(target=self._perform_ai_analysis, args=(process_info,))
        thread.daemon = True
        thread.start()
    
    def _perform_ai_analysis(self, process_info: Dict[str, Any]):
        """–í–∏–∫–æ–Ω—É—î –®–Ü –∞–Ω–∞–ª—ñ–∑ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ"""
        try:
            # –õ–æ–≥—É—î–º–æ –ø–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É
            self.log_ai_message(f"–ü–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ—Ü–µ—Å—É PID {process_info['pid']} ({process_info['name']})")
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ThreatAnalyzer –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            analysis_result = self.threat_analyzer.analyze_process_activity(process_info)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ GUI –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            self.frame.after(0, self._update_ai_results, process_info, analysis_result)
            
        except Exception as e:
            error_msg = f"–ü–æ–º–∏–ª–∫–∞ –®–Ü –∞–Ω–∞–ª—ñ–∑—É: {e}"
            self.frame.after(0, self._handle_ai_error, error_msg)
    
    def _update_ai_results(self, process_info: Dict, analysis_result: Dict):
        """–û–Ω–æ–≤–ª—é—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –®–Ü –∞–Ω–∞–ª—ñ–∑—É –≤ GUI"""
        try:
            threat_level = analysis_result.get('threat_level', 'info')
            suggested_commands = analysis_result.get('suggested_commands', [])
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
            level_emoji = {"info": "‚ÑπÔ∏è", "medium": "‚ö†Ô∏è", "high": "üö®", "critical": "üî•"}
            emoji = level_emoji.get(threat_level, "‚ùì")
            
            self.ai_suggestion_label.config(
                text=f"{emoji} –†—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑–∏: {threat_level.upper()} –¥–ª—è PID {process_info['pid']}"
            )
            
            # –í—Å—Ç–∞–≤–ª—è—î–º–æ –ø–µ—Ä—à—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—É –∫–æ–º–∞–Ω–¥—É
            if suggested_commands:
                self.ai_command_entry.delete(0, tk.END)
                self.ai_command_entry.insert(0, suggested_commands[0])
            
            # –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            self.log_ai_message(f"–ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è PID {process_info['pid']}:")
            self.log_ai_message(f"  –†—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑–∏: {threat_level}")
            
            if analysis_result.get('suspicious_indicators'):
                self.log_ai_message("  –ü—ñ–¥–æ–∑—Ä—ñ–ª—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏:")
                for indicator in analysis_result['suspicious_indicators']:
                    self.log_ai_message(f"    - {indicator}")
            
            if suggested_commands:
                self.log_ai_message("  –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
                for i, cmd in enumerate(suggested_commands[:3], 1):
                    self.log_ai_message(f"    {i}. {cmd}")
            
            # –®–Ü –∞–Ω–∞–ª—ñ–∑
            ai_analysis = analysis_result.get('ai_analysis')
            if ai_analysis:
                self.log_ai_message(f"  –®–Ü –∞–Ω–∞–ª—ñ–∑: {ai_analysis.get('analysis', 'N/A')}")
                confidence = ai_analysis.get('confidence', 0)
                self.log_ai_message(f"  –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {confidence}%")
            
        except Exception as e:
            self._handle_ai_error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {e}")
    
    def _handle_ai_error(self, error_msg: str):
        """–û–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫–∏ –®–Ü –∞–Ω–∞–ª—ñ–∑—É"""
        self.ai_suggestion_label.config(text="‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")
        self.log_ai_message(error_msg, "ERROR")
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞ –®–Ü", error_msg)
    
    def execute_ai_command(self):
        """–í–∏–∫–æ–Ω—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—É –®–Ü –∫–æ–º–∞–Ω–¥—É –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        command = self.ai_command_entry.get().strip()
        if not command:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ù–µ–º–∞—î –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.")
            return
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        result = messagebox.askyesno(
            "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è", 
            f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É?\\n\\n{command}\\n\\n"
            "‚ö†Ô∏è –£–í–ê–ì–ê: –ö–æ–º–∞–Ω–¥–∞ –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–∞ –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –ø—Ä–∏–≤—ñ–ª–µ—è–º–∏!",
            icon="warning"
        )
        
        if not result:
            self.log_ai_message("–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
            return
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–∞–Ω–¥—É
        self.log_ai_message(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: {command}")
        
        try:
            # –í–∏–∫–æ–Ω—É—î–º–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            thread = threading.Thread(target=self._execute_command_thread, args=(command,))
            thread.daemon = True
            thread.start()
            
        except Exception as e:
            error_msg = f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –∫–æ–º–∞–Ω–¥–∏: {e}"
            self.log_ai_message(error_msg, "ERROR")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", error_msg)
    
    def _execute_command_thread(self, command: str):
        """–í–∏–∫–æ–Ω—É—î –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            # –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–∞–Ω–¥—É
            result = subprocess.run(
                command, 
                shell=True, 
                capture_output=True, 
                text=True, 
                timeout=30
            )
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–≥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            self.frame.after(0, self._update_command_result, command, result)
            
        except subprocess.TimeoutExpired:
            self.frame.after(0, self._handle_command_error, command, "–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∞ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (30—Å)")
        except Exception as e:
            self.frame.after(0, self._handle_command_error, command, str(e))
    
    def _update_command_result(self, command: str, result):
        """–û–Ω–æ–≤–ª—é—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏"""
        self.log_ai_message(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –∫–æ–¥–æ–º: {result.returncode}")
        
        if result.stdout:
            self.log_ai_message("STDOUT:")
            for line in result.stdout.splitlines()[:10]:  # –û–±–º–µ–∂—É—î–º–æ –≤–∏–≤—ñ–¥
                self.log_ai_message(f"  {line}")
        
        if result.stderr:
            self.log_ai_message("STDERR:")
            for line in result.stderr.splitlines()[:5]:
                self.log_ai_message(f"  {line}")
        
        if result.returncode == 0:
            messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        else:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑ –∫–æ–¥–æ–º {result.returncode}")
    
    def _handle_command_error(self, command: str, error: str):
        """–û–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏"""
        error_msg = f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ '{command}': {error}"
        self.log_ai_message(error_msg, "ERROR")
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è", error_msg)
    
    def copy_command(self):
        """–ö–æ–ø—ñ—é—î –∫–æ–º–∞–Ω–¥—É –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É"""
        command = self.ai_command_entry.get().strip()
        if command:
            self.frame.clipboard_clear()
            self.frame.clipboard_append(command)
            self.log_ai_message(f"–ö–æ–º–∞–Ω–¥—É —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ: {command}")
            messagebox.showinfo("–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ", "–ö–æ–º–∞–Ω–¥—É —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É!")
        else:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ù–µ–º–∞—î –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è.")
    
    def update_ai_status(self):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –®–Ü –∑'—î–¥–Ω–∞–Ω–Ω—è"""
        try:
            if self.llm_agent.check_ollama_connection():
                models = self.llm_agent.get_available_models()
                self.ai_status_label.config(
                    text=f"‚úÖ Ollama –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ | –ú–æ–¥–µ–ª—ñ: {', '.join(models[:2])}" if models else "‚úÖ Ollama –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ",
                    foreground="green"
                )
            else:
                self.ai_status_label.config(
                    text="‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ | –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π —Å–µ—Ä–≤—ñ—Å",
                    foreground="red"
                )
        except Exception as e:
            self.ai_status_label.config(
                text=f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É: {e}",
                foreground="orange"
            )
    
    def log_ai_message(self, message: str, level: str = "INFO"):
        """–î–æ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –ª–æ–≥—É –®–Ü"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {level}: {message}\\n"
        
        self.ai_log.insert(tk.END, formatted_message)
        self.ai_log.see(tk.END)  # –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –¥–æ –∫—ñ–Ω—Ü—è


class EnhancedNimdaGUI:
    """
    –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –≥–æ–ª–æ–≤–Ω–∏–π GUI –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –®–Ü-–ø–æ–º—ñ—á–Ω–∏–∫–∞
    """
    
    def __init__(self, root):
        self.root = root
        self.root.title("üõ°Ô∏è NIMDA-Mac Security System v2.0")
        self.root.geometry("1200x800")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        self.threat_analyzer = ThreatAnalyzer()
        self.security_monitor = SecurityMonitor()
        self.monitoring_active = False
        
        self.create_main_interface()
        
    def create_main_interface(self):
        """–°—Ç–≤–æ—Ä—é—î –æ—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        
        # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        self.create_menu()
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å—É
        self.create_status_bar()
        
        # –û—Å–Ω–æ–≤–Ω–∏–π notebook –∑ –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∫–ª–∞–¥–∫–∏
        self.create_overview_tab()
        self.create_processes_tab()
        self.create_network_tab()
        self.create_logs_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –®–Ü-–ø–æ–º—ñ—á–Ω–∏–∫–∞
        self.ai_assistant = AIAssistantTab(self.notebook, self.threat_analyzer)
        
        self.create_settings_tab()
        
    def create_menu(self):
        """–°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # –ú–µ–Ω—é File
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(label="Export Logs", command=self.export_logs)
        file_menu.add_separator()
        file_menu.add_command(label="Exit", command=self.root.quit)
        
        # –ú–µ–Ω—é Security
        security_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Security", menu=security_menu)
        security_menu.add_command(label="Update Rules", command=self.update_security_rules)
        security_menu.add_command(label="Run Full Scan", command=self.run_full_scan)
        
        # –ú–µ–Ω—é AI
        ai_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="AI", menu=ai_menu)
        ai_menu.add_command(label="Check AI Status", command=self.check_ai_status)
        ai_menu.add_command(label="Update AI Models", command=self.update_ai_models)
        
    def create_status_bar(self):
        """–°—Ç–≤–æ—Ä—é—î –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å—É"""
        self.status_frame = ttk.Frame(self.root)
        self.status_frame.pack(fill="x", side="bottom")
        
        self.status_label = ttk.Label(self.status_frame, text="üü¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
        self.status_label.pack(side="left", padx=5)
        
        # –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        self.monitoring_label = ttk.Label(self.status_frame, text="‚è∏Ô∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ")
        self.monitoring_label.pack(side="right", padx=5)
    
    def create_overview_tab(self):
        """–°—Ç–≤–æ—Ä—é—î –≤–∫–ª–∞–¥–∫—É –æ–≥–ª—è–¥—É"""
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="üìä Overview")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä–æ–∑
        stats_frame = ttk.LabelFrame(frame, text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä–æ–∑")
        stats_frame.pack(fill="x", padx=10, pady=10)
        
        self.threat_stats = ttk.Label(stats_frame, text="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        self.threat_stats.pack(pady=10)
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        control_frame = ttk.LabelFrame(frame, text="üéõÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª—å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
        control_frame.pack(fill="x", padx=10, pady=10)
        
        ttk.Button(control_frame, text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É", 
                  command=self.start_monitoring).pack(side="left", padx=5, pady=5)
        ttk.Button(control_frame, text="‚è∏Ô∏è –°—Ç–æ–ø –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É", 
                  command=self.stop_monitoring).pack(side="left", padx=5, pady=5)
        
    def create_processes_tab(self):
        """–°—Ç–≤–æ—Ä—é—î –≤–∫–ª–∞–¥–∫—É –ø—Ä–æ—Ü–µ—Å—ñ–≤"""
        self.processes_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.processes_frame, text="‚öôÔ∏è Processes")
        
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Ü–µ—Å—ñ–≤
        info_label = ttk.Label(self.processes_frame, 
                              text="–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É 'AI Assistant' –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ—Ü–µ—Å—ñ–≤")
        info_label.pack(pady=20)
    
    def create_network_tab(self):
        """–°—Ç–≤–æ—Ä—é—î –≤–∫–ª–∞–¥–∫—É –º–µ—Ä–µ–∂—ñ"""
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="üåê Network")
        
        network_label = ttk.Label(frame, text="–ú–µ—Ä–µ–∂–µ–≤–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö")
        network_label.pack(pady=20)
    
    def create_logs_tab(self):
        """–°—Ç–≤–æ—Ä—é—î –≤–∫–ª–∞–¥–∫—É –ª–æ–≥—ñ–≤"""
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="üìú Logs")
        
        self.logs_text = scrolledtext.ScrolledText(frame, height=20, font=("Courier", 9))
        self.logs_text.pack(fill="both", expand=True, padx=10, pady=10)
        
    def create_settings_tab(self):
        """–°—Ç–≤–æ—Ä—é—î –≤–∫–ª–∞–¥–∫—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        frame = ttk.Frame(self.notebook)
        self.notebook.add(frame, text="‚öôÔ∏è Settings")
        
        settings_label = ttk.Label(frame, text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏")
        settings_label.pack(pady=20)
    
    # –ú–µ—Ç–æ–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"""
        self.monitoring_active = True
        self.monitoring_label.config(text="‚ñ∂Ô∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–∏–π")
        self.status_label.config(text="üü¢ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ")
        self.log_message("–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–ø–µ–∫–∏ –∑–∞–ø—É—â–µ–Ω–æ")
    
    def stop_monitoring(self):
        """–ó—É–ø–∏–Ω—è—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"""
        self.monitoring_active = False
        self.monitoring_label.config(text="‚è∏Ô∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ")
        self.status_label.config(text="üü° –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ")
        self.log_message("–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–ø–µ–∫–∏ –∑—É–ø–∏–Ω–µ–Ω–æ")
    
    def update_security_rules(self):
        """–û–Ω–æ–≤–ª—é—î –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–ø–µ–∫–∏"""
        self.status_label.config(text="üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª...")
        
        def update_thread():
            try:
                success_count = self.threat_analyzer.rule_manager.update_all_rules()
                self.root.after(0, lambda: self.status_label.config(
                    text=f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ {success_count} –Ω–∞–±–æ—Ä—ñ–≤ –ø—Ä–∞–≤–∏–ª"
                ))
                self.root.after(0, lambda: self.log_message(f"–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–ø–µ–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ: {success_count} –Ω–∞–±–æ—Ä—ñ–≤"))
            except Exception as e:
                error_msg = str(e)
                self.root.after(0, lambda: self.status_label.config(text="‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª"))
                self.root.after(0, lambda: self.log_message(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª: {error_msg}"))
        
        thread = threading.Thread(target=update_thread)
        thread.daemon = True
        thread.start()
    
    def run_full_scan(self):
        """–ó–∞–ø—É—Å–∫–∞—î –ø–æ–≤–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
        self.status_label.config(text="üîç –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ–≤–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è...")
        self.log_message("–†–æ–∑–ø–æ—á–∞—Ç–æ –ø–æ–≤–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏")
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –ø–æ–≤–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
    
    def check_ai_status(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –®–Ü"""
        self.ai_assistant.update_ai_status()
    
    def update_ai_models(self):
        """–û–Ω–æ–≤–ª—é—î –º–æ–¥–µ–ª—ñ –®–Ü"""
        messagebox.showinfo("Info", "–§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –®–Ü –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö")
    
    def export_logs(self):
        """–ï–∫—Å–ø–æ—Ä—Ç—É—î –ª–æ–≥–∏"""
        messagebox.showinfo("Info", "–§—É–Ω–∫—Ü—ñ—è –µ–∫—Å–ø–æ—Ä—Ç—É –ª–æ–≥—ñ–≤ –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö")
    
    def log_message(self, message: str):
        """–î–æ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –ª–æ–≥—É"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        formatted_message = f"[{timestamp}] {message}\\n"
        self.logs_text.insert(tk.END, formatted_message)
        self.logs_text.see(tk.END)


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É GUI"""
    root = tk.Tk()
    _ = EnhancedNimdaGUI(root)  # –°—Ç–≤–æ—Ä—é—î–º–æ GUI, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ GUI
    try:
        root.mainloop()
    except KeyboardInterrupt:
        print("\\n–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")


if __name__ == "__main__":
    main()
