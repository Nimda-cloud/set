#!/usr/bin/env python3
"""
NIMDA Project Structure Creator
–°—Ç–≤–æ—Ä—é—î –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç—É NIMDA –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —ñ–º–ø–æ—Ä—Ç–∞–º–∏
"""

import os
from pathlib import Path

class ProjectStructureCreator:
    def __init__(self, base_path: str):
        self.base_path = Path(base_path)
    
    def create_gitignore(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ .gitignore —Ñ–∞–π–ª"""
        gitignore_content = """# Python
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
*.so
.pytest_cache/
.coverage
htmlcov/

# Virtual Environment
venv/
env/
ENV/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# NIMDA specific
backup_before_reorganize/
*.db
*.log
.env
credentials.json

# Temporary files
*.tmp
*.temp
"""
        gitignore_file = self.base_path / '.gitignore'
        gitignore_file.write_text(gitignore_content)
        print("üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ .gitignore")

    def create_main_readme(self):
        """–û–Ω–æ–≤–∏—Ç–∏ –≥–æ–ª–æ–≤–Ω–∏–π README.md"""
        readme_content = """# üõ°Ô∏è NIMDA Security System

–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–ø–µ–∫–∏ –∑ AI-–ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–∞ –∑–∞—Ö–∏—Å—Ç—É macOS —Å–∏—Å—Ç–µ–º.

## üöÄ –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç

```bash
# 1. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
pip3 install -r requirements.txt

# 2. –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
python3 nimda_tkinter.py

# –∞–±–æ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç
./scripts/start_nimda_tkinter.sh
```

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É

```
NIMDA/
‚îú‚îÄ‚îÄ üìÑ –ì–æ–ª–æ–≤–Ω—ñ –º–æ–¥—É–ª—ñ (–∫–æ—Ä—ñ–Ω—å)
‚îÇ   ‚îú‚îÄ‚îÄ nimda_integrated.py      # –û—Å–Ω–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å
‚îÇ   ‚îú‚îÄ‚îÄ nimda_tkinter.py         # GUI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚îÇ   ‚îú‚îÄ‚îÄ security_monitor.py      # –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
‚îÇ   ‚îú‚îÄ‚îÄ malware_detection.py     # –í–∏—è–≤–ª–µ–Ω–Ω—è –º–∞–ª–≤–∞—Ä–µ
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ üìÅ scripts/                  # –°–∫—Ä–∏–ø—Ç–∏ –∑–∞–ø—É—Å–∫—É
‚îú‚îÄ‚îÄ üìÅ docs/                     # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
‚îú‚îÄ‚îÄ üìÅ tests/                    # –¢–µ—Å—Ç–∏
‚îú‚îÄ‚îÄ üìÅ demos/                    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
‚îú‚îÄ‚îÄ üìÅ configs/                  # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
‚îî‚îÄ‚îÄ üìÅ data/                     # –ë–∞–∑–∏ –¥–∞–Ω–∏—Ö
```

## üîß –û—Å–Ω–æ–≤–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ

- üîç **–†–µ–∞–ª—å–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥** –º–µ—Ä–µ–∂—ñ —Ç–∞ –ø—Ä–æ—Ü–µ—Å—ñ–≤
- üõ°Ô∏è **–í–∏—è–≤–ª–µ–Ω–Ω—è –º–∞–ª–≤–∞—Ä–µ** —Ç–∞ –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
- ü§ñ **AI-–∞–Ω–∞–ª—ñ–∑ –∑–∞–≥—Ä–æ–∑** (Ollama + Gemini)
- üîä **–ó–≤—É–∫–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è** –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ –∑–∞–≥—Ä–æ–∑
- üåô **–¢–µ–º–Ω–∞ —Ç–µ–º–∞** —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
- üìä **5-—Ä—ñ–≤–Ω–µ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä–æ–∑**

## üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è

- [–ë–µ–∑–ø–µ–∫–∞](docs/README_SECURITY.md)
- [–í–∏—è–≤–ª–µ–Ω–Ω—è –º–∞–ª–≤–∞—Ä–µ](docs/README_MALWARE_DETECTION.md)
- [–†—ñ–≤–Ω—ñ –∑–∞–≥—Ä–æ–∑](docs/README_THREAT_LEVELS.md)
- [–ü—Ä–∏—Å—Ç—Ä–æ—ó —Ç–∞ –ø—Ä–æ—Ü–µ—Å–∏](docs/README_DEVICES_PROCESSES.md)

## üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è

```bash
# –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
python3 -m pytest tests/

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
python3 demos/nimda_complete_demo.py
```

## ‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è

–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏:
- `ai_providers_config.json` - AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏
- `security_policy.json` - –ü–æ–ª—ñ—Ç–∏–∫–∏ –±–µ–∑–ø–µ–∫–∏

## ü§ù –ü—ñ–¥—Ç—Ä–∏–º–∫–∞

–î–ª—è –ø–∏—Ç–∞–Ω—å —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –¥–∏–≤—ñ—Ç—å—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é –≤ –ø–∞–ø—Ü—ñ `docs/`.
"""
        readme_file = self.base_path / 'README.md'
        readme_file.write_text(readme_content)
        print("üìÑ –û–Ω–æ–≤–ª–µ–Ω–æ README.md")

    def create_setup_py(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ setup.py –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —ñ–Ω—Å—Ç–∞–ª—è—Ü—ñ—ó"""
        setup_content = """#!/usr/bin/env python3
from setuptools import setup, find_packages

setup(
    name="nimda-security",
    version="2.5.0",
    description="NIMDA Security System - AI-powered security monitoring",
    long_description=open("README.md", encoding="utf-8").read(),
    long_description_content_type="text/markdown",
    author="NIMDA Team",
    python_requires=">=3.8",
    packages=find_packages(),
    install_requires=[
        line.strip()
        for line in open("requirements.txt", encoding="utf-8")
        if line.strip() and not line.startswith("#")
    ],
    entry_points={
        "console_scripts": [
            "nimda=nimda_tkinter:main",
            "nimda-security=nimda_integrated:main",
        ],
    },
    classifiers=[
        "Development Status :: 4 - Beta",
        "Intended Audience :: System Administrators",
        "Topic :: Security",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
    ],
)
"""
        setup_file = self.base_path / 'setup.py'
        setup_file.write_text(setup_content)
        print("üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ setup.py")

    def create_manifest(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ MANIFEST.in"""
        manifest_content = """include README.md
include requirements.txt
include LICENSE
recursive-include docs *.md
recursive-include scripts *.sh
recursive-include configs *.json
recursive-exclude * __pycache__
recursive-exclude * *.py[co]
"""
        manifest_file = self.base_path / 'MANIFEST.in'
        manifest_file.write_text(manifest_content)
        print("üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ MANIFEST.in")

    def create_makefile(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ Makefile –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ"""
        makefile_content = """# NIMDA Security System Makefile

.PHONY: help install test clean run demo lint format

help:  ## –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-20s\\033[0m %s\\n", $$1, $$2}'

install:  ## –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
	pip3 install -r requirements.txt

test:  ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏
	python3 -m pytest tests/ -v

clean:  ## –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -type f -name "*.pyc" -delete
	find . -type f -name "*.pyo" -delete
	find . -type f -name "*.pyd" -delete

run:  ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≥–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	python3 nimda_tkinter.py

demo:  ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é
	python3 demos/nimda_complete_demo.py

lint:  ## –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–¥
	python3 -m flake8 . --max-line-length=100 --exclude=__pycache__,venv

format:  ## –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –∫–æ–¥
	python3 -m black . --line-length=100

setup:  ## –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–∞–∫–µ—Ç –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
	pip3 install -e .

dist:  ## –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤
	python3 setup.py sdist bdist_wheel

upload:  ## –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ PyPI (—Ç–µ—Å—Ç–æ–≤–∏–π)
	python3 -m twine upload --repository testpypi dist/*

reorganize:  ## –†–µ–æ—Ä–≥–∞–Ω—ñ–∑—É–≤–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç—É
	python3 reorganize_project.py
"""
        makefile_file = self.base_path / 'Makefile'
        makefile_file.write_text(makefile_content)
        print("üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ Makefile")

    def create_docker_files(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ Docker –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
        dockerfile_content = """# NIMDA Security System Docker Image
FROM python:3.11-slim

LABEL maintainer="NIMDA Team"
LABEL description="NIMDA Security System - AI-powered security monitoring"

# –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
RUN apt-get update && apt-get install -y \\
    curl \\
    git \\
    && rm -rf /var/lib/apt/lists/*

# –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–±–æ—á—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
WORKDIR /app

# –ö–æ–ø—ñ—é–≤–∞—Ç–∏ requirements —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Python –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–¥ –¥–æ–¥–∞—Ç–∫–∞
COPY . .

# –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–µ–∑–ø–µ–∫–∏
RUN useradd --create-home --shell /bin/bash nimda
RUN chown -R nimda:nimda /app
USER nimda

# –ï–∫—Å–ø–æ—Ä—Ç –ø–æ—Ä—Ç—ñ–≤
EXPOSE 8000

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
ENV PYTHONPATH=/app
ENV NIMDA_ENV=production

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫—É
CMD ["python3", "nimda_integrated.py"]
"""
        
        dockerfile = self.base_path / 'Dockerfile'
        dockerfile.write_text(dockerfile_content)
        
        dockerignore_content = """__pycache__
*.pyc
*.pyo
*.pyd
.Python
.git
.gitignore
README.md
Dockerfile
.dockerignore
backup_before_reorganize/
"""
        dockerignore = self.base_path / '.dockerignore'
        dockerignore.write_text(dockerignore_content)
        
        print("üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ Dockerfile —Ç–∞ .dockerignore")

    def create_all_files(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—Å—ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ–∞–π–ª–∏"""
        print("üõ†Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É...")
        
        self.create_gitignore()
        self.create_main_readme()
        self.create_setup_py()
        self.create_manifest()
        self.create_makefile()
        self.create_docker_files()
        
        print("‚úÖ –í—Å—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ–∞–π–ª–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")

def main():
    current_dir = os.path.dirname(os.path.abspath(__file__))
    creator = ProjectStructureCreator(current_dir)
    creator.create_all_files()

if __name__ == "__main__":
    main()
