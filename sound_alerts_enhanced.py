#!/usr/bin/env python3
"""
NIMDA Enhanced Sound Alert System
–†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑ —ñ–Ω—Ç—É—ó—Ç–∏–≤–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏

–ü—ñ–¥—Ç—Ä–∏–º—É—î:
- 5 —Ä—ñ–≤–Ω—ñ–≤ –∑–∞–≥—Ä–æ–∑ (–≤—ñ–¥ LOW –¥–æ EMERGENCY)
- 8 —Ç–∏–ø—ñ–≤ –∑–∞–≥—Ä–æ–∑ (–º–µ—Ä–µ–∂–∞, –ø—Ä–æ—Ü–µ—Å–∏, GPU, peripherals, —Ç–æ—â–æ)
- –†–æ–∑—É–º–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ –º—ñ–∂ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏
- –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω—ñ –∑–≤—É–∫–∏: —Å–∏—Å—Ç–µ–º–Ω—ñ + beep + –≥–æ–ª–æ—Å
- –ê–≤–∞—Ä—ñ–π–Ω–∞ —Å–∏—Ä–µ–Ω–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π
"""

import sys
import time
import threading
import subprocess
from datetime import datetime
from enum import Enum
from colorama import Fore, Style, init

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è colorama
init()

class ThreatLevel(Enum):
    """
    –†—ñ–≤–Ω—ñ –∑–∞–≥—Ä–æ–∑ –±–µ–∑–ø–µ–∫–∏
    
    LOW: –ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    MEDIUM: –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å - –ø–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏
    HIGH: –í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å - –ø–æ—Ç—Ä–µ–±—É—î –Ω–µ–≥–∞–π–Ω–æ—ó —É–≤–∞–≥–∏
    CRITICAL: –ö—Ä–∏—Ç–∏—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å - —Å–µ—Ä–π–æ–∑–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞
    EMERGENCY: –ê–≤–∞—Ä—ñ–π–Ω–∏–π —Ä—ñ–≤–µ–Ω—å - –Ω–µ–≥–∞–π–Ω–µ –≤—Ç—Ä—É—á–∞–Ω–Ω—è
    """
    LOW = 1       # üü¢ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    MEDIUM = 2    # üü° –£–≤–∞–≥–∞
    HIGH = 3      # üü† –ù–µ–±–µ–∑–ø–µ–∫–∞
    CRITICAL = 4  # üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ
    EMERGENCY = 5 # üö® –ê–≤–∞—Ä—ñ—è

class AlertType(Enum):
    """
    –¢–∏–ø–∏ –∑–∞–≥—Ä–æ–∑ –±–µ–∑–ø–µ–∫–∏
    
    –ö–æ–∂–µ–Ω —Ç–∏–ø –º–∞—î —Å–≤–æ—ó —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ñ –∑–≤—É–∫–∏ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    """
    NETWORK_INTRUSION = "network_intrusion"      # –ú–µ—Ä–µ–∂–µ–≤—ñ –≤—Ç–æ—Ä–≥–Ω–µ–Ω–Ω—è
    SUSPICIOUS_PROCESS = "suspicious_process"    # –ü—ñ–¥–æ–∑—Ä—ñ–ª—ñ –ø—Ä–æ—Ü–µ—Å–∏
    GPU_MINING = "gpu_mining"                    # –ú–∞–π–Ω—ñ–Ω–≥ –Ω–∞ GPU
    LOCKDOWN_BREACH = "lockdown_breach"          # –ü–æ—Ä—É—à–µ–Ω–Ω—è lockdown
    SYSTEM_ERROR = "system_error"                # –°–∏—Å—Ç–µ–º–Ω—ñ –ø–æ–º–∏–ª–∫–∏
    PERIPHERAL_DETECTED = "peripheral_detected"  # –ó–æ–≤–Ω—ñ—à–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó
    SSH_CONNECTION = "ssh_connection"            # SSH –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    PORT_SCAN = "port_scan"                      # –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ—Ä—Ç—ñ–≤

class SoundAlertSystem:
    """
    –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å NIMDA
    
    –û—Å–Ω–æ–≤–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:
    - –ë–∞–≥–∞—Ç–æ—Ä—ñ–≤–Ω–µ–≤—ñ –∑–≤—É–∫–æ–≤—ñ —Å–∏–≥–Ω–∞–ª–∏
    - –†–æ–∑—É–º–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
    - –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω—ñ —Ç–∏–ø–∏ –∑–≤—É–∫—ñ–≤ (—Å–∏—Å—Ç–µ–º–Ω—ñ + beep + –≥–æ–ª–æ—Å)
    - –ê–≤–∞—Ä—ñ–π–Ω–∞ —Å–∏—Ä–µ–Ω–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π
    - –î–µ—Ç–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –∑–∞–≥—Ä–æ–∑–∏
    """
    
    def __init__(self, enable_voice=True, enable_beeps=True, enable_system_sounds=True):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∑–≤—É–∫–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
        
        Args:
            enable_voice: –£–≤—ñ–º–∫–Ω—É—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            enable_beeps: –£–≤—ñ–º–∫–Ω—É—Ç–∏ beep —Å–∏–≥–Ω–∞–ª–∏
            enable_system_sounds: –£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ñ –∑–≤—É–∫–∏ macOS
        """
        self.sound_enabled = True
        self.voice_enabled = enable_voice
        self.beeps_enabled = enable_beeps
        self.system_sounds_enabled = enable_system_sounds
        
        # –°—Ç–∞–Ω –∞–≤–∞—Ä—ñ–π–Ω–æ—ó —Å–∏—Ä–µ–Ω–∏
        self.emergency_active = False
        self.emergency_thread = None
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        self.last_alert_time = {}
        
        # –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –Ü–ù–¢–ï–†–í–ê–õ–Ü–í –ú–Ü–ñ –°–ü–û–í–Ü–©–ï–ù–ù–Ø–ú–ò
        # –ß–∞—Å —É —Å–µ–∫—É–Ω–¥–∞—Ö –º—ñ–∂ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏ —Ç–æ–≥–æ –∂ —Ç–∏–ø—É
        self.alert_intervals = {
            ThreatLevel.LOW: 60,       # 1 —Ö–≤–∏–ª–∏–Ω–∞ - —Ä—ñ–¥–∫–æ
            ThreatLevel.MEDIUM: 30,    # 30 —Å–µ–∫—É–Ω–¥ - –ø–æ–º—ñ—Ä–Ω–æ
            ThreatLevel.HIGH: 10,      # 10 —Å–µ–∫—É–Ω–¥ - —á–∞—Å—Ç–æ
            ThreatLevel.CRITICAL: 5,   # 5 —Å–µ–∫—É–Ω–¥ - –¥—É–∂–µ —á–∞—Å—Ç–æ
            ThreatLevel.EMERGENCY: 2   # 2 —Å–µ–∫—É–Ω–¥–∏ - –ø–æ—Å—Ç—ñ–π–Ω–æ
        }
        
        # –°–ò–°–¢–ï–ú–ù–Ü –ó–í–£–ö–ò macOS
        # –ö–æ–∂–µ–Ω —Ä—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑–∏ –º–∞—î —Å–≤—ñ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∏–π –∑–≤—É–∫
        self.system_sounds = {
            ThreatLevel.LOW: "Tink",        # –ú'—è–∫–∏–π —Ç–∏—Ö–∏–π –∑–≤—É–∫
            ThreatLevel.MEDIUM: "Pop",      # –ü–æ–º—ñ—Ç–Ω–∏–π –∑–≤—É–∫
            ThreatLevel.HIGH: "Sosumi",     # –†—ñ–∑–∫–∏–π —É–≤–∞–≥–∞-–∑–≤—É–∫
            ThreatLevel.CRITICAL: "Basso",  # –ì–ª–∏–±–æ–∫–∏–π —Å–µ—Ä–π–æ–∑–Ω–∏–π –∑–≤—É–∫
            ThreatLevel.EMERGENCY: "Funk"   # –ù–∞–π–≥—É—á–Ω—ñ—à–∏–π —Ç—Ä–∏–≤–æ–∂–Ω–∏–π –∑–≤—É–∫
        }
        
        # –ü–ê–¢–ï–†–ù–ò BEEP –°–ò–ì–ù–ê–õ–Ü–í
        # –ö–æ–∂–µ–Ω —Ä—ñ–≤–µ–Ω—å –º–∞—î —É–Ω—ñ–∫–∞–ª—å–Ω—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å
        self.beep_patterns = {
            ThreatLevel.LOW: [1],              # ‚Ä¢ (–æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π)
            ThreatLevel.MEDIUM: [1, 1],        # ‚Ä¢‚Ä¢ (–¥–≤–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö)
            ThreatLevel.HIGH: [1, 1, 1],       # ‚Ä¢‚Ä¢‚Ä¢ (—Ç—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö)
            ThreatLevel.CRITICAL: [2, 1, 2],   # -‚Ä¢- (–¥–æ–≤–≥–∏–π-–∫–æ—Ä–æ—Ç–∫–∏–π-–¥–æ–≤–≥–∏–π)
            ThreatLevel.EMERGENCY: [3, 3, 3]   # --- (—Ç—Ä–∏ –¥–æ–≤–≥–∏—Ö - SOS —Å—Ç–∏–ª—å)
        }
        
        # –ì–û–õ–û–°–û–í–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
        # –†—ñ–∑–Ω—ñ –≥–æ–ª–æ—Å–∏ —Ç–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
        self.voice_settings = {
            ThreatLevel.LOW: {"voice": "Alex", "rate": "180"},        # –°–ø–æ–∫—ñ–π–Ω–∏–π
            ThreatLevel.MEDIUM: {"voice": "Victoria", "rate": "200"}, # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π
            ThreatLevel.HIGH: {"voice": "Daniel", "rate": "230"},     # –ï–Ω–µ—Ä–≥—ñ–π–Ω–∏–π
            ThreatLevel.CRITICAL: {"voice": "Fiona", "rate": "250"},  # –°–µ—Ä–π–æ–∑–Ω–∏–π
            ThreatLevel.EMERGENCY: {"voice": "Alex", "rate": "280"}   # –®–≤–∏–¥–∫–∏–π
        }
        
        # –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –î–õ–Ø –ö–û–ñ–ù–û–ì–û –¢–ò–ü–£ –ó–ê–ì–†–û–ó–ò
        self.alert_messages = {
            AlertType.NETWORK_INTRUSION: {
                "short": "Network intrusion detected",
                "detailed": "Suspicious network activity detected. Check connections."
            },
            AlertType.SUSPICIOUS_PROCESS: {
                "short": "Suspicious process detected",
                "detailed": "Unknown or suspicious process is running. Investigate immediately."
            },
            AlertType.GPU_MINING: {
                "short": "GPU mining activity detected",
                "detailed": "High GPU usage detected. Possible cryptocurrency mining."
            },
            AlertType.LOCKDOWN_BREACH: {
                "short": "Lockdown system breach",
                "detailed": "Security lockdown has been breached. System compromised."
            },
            AlertType.SYSTEM_ERROR: {
                "short": "Critical system error",
                "detailed": "System error detected. Check logs for details."
            },
            AlertType.PERIPHERAL_DETECTED: {
                "short": "Unauthorized peripheral detected",
                "detailed": "New USB or peripheral device connected without authorization."
            },
            AlertType.SSH_CONNECTION: {
                "short": "Suspicious SSH connection",
                "detailed": "Incoming SSH connection from unknown source."
            },
            AlertType.PORT_SCAN: {
                "short": "Port scanning detected",
                "detailed": "Network port scanning activity detected from external source."
            }
        }
        
        # EMOJI –î–õ–Ø –†–Ü–ó–ù–ò–• –†–Ü–í–ù–Ü–í
        self.threat_emoji = {
            ThreatLevel.LOW: "üü¢",
            ThreatLevel.MEDIUM: "üü°", 
            ThreatLevel.HIGH: "üü†",
            ThreatLevel.CRITICAL: "üî¥",
            ThreatLevel.EMERGENCY: "üö®"
        }
        
        print(f"{Fore.GREEN}üîä –°–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å NIMDA —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞{Style.RESET_ALL}")
        self._print_configuration()
    
    def _print_configuration(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Å–∏—Å—Ç–µ–º–∏"""
        print(f"{Fore.CYAN}–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:{Style.RESET_ALL}")
        print(f"  –ì–æ–ª–æ—Å–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {'‚úÖ' if self.voice_enabled else '‚ùå'}")
        print(f"  Beep —Å–∏–≥–Ω–∞–ª–∏: {'‚úÖ' if self.beeps_enabled else '‚ùå'}")
        print(f"  –°–∏—Å—Ç–µ–º–Ω—ñ –∑–≤—É–∫–∏: {'‚úÖ' if self.system_sounds_enabled else '‚ùå'}")
        print(f"  –Ü–Ω—Ç–µ—Ä–≤–∞–ª–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å: {dict((k.name, f'{v}—Å') for k, v in self.alert_intervals.items())}")
    
    def can_play_alert(self, alert_type, threat_level):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º–æ–∂–Ω–∞ –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        
        –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é—î —á–∞—Å—Ç–æ—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —â–æ–± –Ω–µ —Å–ø–∞–º–∏—Ç–∏
        """
        if not self.sound_enabled:
            return False
        
        current_time = time.time()
        key = f"{alert_type.value}_{threat_level.name}"
        
        if key in self.last_alert_time:
            interval = self.alert_intervals[threat_level]
            time_passed = current_time - self.last_alert_time[key]
            
            if time_passed < interval:
                remaining = interval - time_passed
                print(f"{Fore.YELLOW}‚è±Ô∏è  –û—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: –∑–∞–ª–∏—à–∏–ª–æ—Å—è {remaining:.1f}—Å{Style.RESET_ALL}")
                return False
        
        self.last_alert_time[key] = current_time
        return True
    
    def play_system_sound(self, sound_name):
        """–í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω–∏–π –∑–≤—É–∫ macOS"""
        if not self.system_sounds_enabled:
            return
        
        try:
            # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω–∏–π –∑–≤—É–∫
            result = subprocess.run(
                ['afplay', f'/System/Library/Sounds/{sound_name}.aiff'], 
                check=False, capture_output=True, timeout=3
            )
            if result.returncode != 0:
                # Fallback –Ω–∞ –±–∞–∑–æ–≤–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –∑–≤—É–∫
                subprocess.run(['osascript', '-e', 'beep'], check=False, timeout=1)
        except Exception:
            # –û—Å—Ç–∞–Ω–Ω—ñ–π fallback
            subprocess.run(['osascript', '-e', 'beep'], check=False)
    
    def generate_beep_sequence(self, threat_level):
        """–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å beep —Å–∏–≥–Ω–∞–ª—ñ–≤"""
        if not self.beeps_enabled:
            return
        
        pattern = self.beep_patterns.get(threat_level, [1])
        
        for i, duration in enumerate(pattern):
            try:
                if duration == 1:  # –ö–æ—Ä–æ—Ç–∫–∏–π beep
                    subprocess.run(['osascript', '-e', 'beep 1'], 
                                 check=False, timeout=1)
                    time.sleep(0.1)
                elif duration == 2:  # –°–µ—Ä–µ–¥–Ω—ñ–π beep
                    subprocess.run(['osascript', '-e', 'beep 2'], 
                                 check=False, timeout=1)
                    time.sleep(0.2)
                else:  # –î–æ–≤–≥–∏–π beep
                    subprocess.run(['osascript', '-e', 'beep 3'], 
                                 check=False, timeout=1)
                    time.sleep(0.3)
                
                # –ü–∞—É–∑–∞ –º—ñ–∂ —Å–∏–≥–Ω–∞–ª–∞–º–∏ (–∫—Ä—ñ–º –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ)
                if i < len(pattern) - 1:
                    time.sleep(0.2)
                    
            except Exception:
                # –ü—Ä–æ—Å—Ç–∏–π fallback beep
                subprocess.run(['osascript', '-e', 'beep'], check=False)
    
    def play_voice_alert(self, message, threat_level):
        """–í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
        if not self.voice_enabled:
            return
        
        try:
            settings = self.voice_settings.get(threat_level, 
                                             {"voice": "Alex", "rate": "200"})
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ say –∫–æ–º–∞–Ω–¥—É –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
            subprocess.run([
                'say', 
                '-v', settings["voice"], 
                '-r', settings["rate"], 
                message
            ], check=False, timeout=10)
            
        except Exception:
            # Fallback - –ø—Ä–æ—Å—Ç–∏–π beep –∑–∞–º—ñ—Å—Ç—å –≥–æ–ª–æ—Å—É
            subprocess.run(['osascript', '-e', 'beep'], check=False)
    
    def emergency_siren(self):
        """
        –ê–≤–∞—Ä—ñ–π–Ω–∞ —Å–∏—Ä–µ–Ω–∞ –¥–ª—è –Ω–∞–π–≤–∏—â–æ–≥–æ —Ä—ñ–≤–Ω—è –∑–∞–≥—Ä–æ–∑–∏
        
        –ü—Ä–∞—Ü—é—î —É —Ü–∏–∫–ª—ñ –¥–æ –∑—É–ø–∏–Ω–∫–∏:
        - –®–≤–∏–¥–∫–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –∑–≤—É–∫—ñ–≤ (—Å–∏—Ä–µ–Ω–∞)
        - –ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏–º–∏ –º–æ–≤–∞–º–∏
        - –ö–æ—Ä–æ—Ç–∫—ñ –ø–∞—É–∑–∏ –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏
        """
        emergency_messages = [
            "–ù–ê–î–ó–í–ò–ß–ê–ô–ù–ê –°–ò–¢–£–ê–¶–Ü–Ø! –í–ò–Ø–í–õ–ï–ù–û –ü–û–†–£–®–ï–ù–ù–Ø –ë–ï–ó–ü–ï–ö–ò!",
            "–£–í–ê–ì–ê! –ü–û–†–£–®–ï–ù–ù–Ø –ë–ï–ó–ü–ï–ö–ò!",
            "–ê–ö–¢–ò–í–û–í–ê–ù–û –ö–†–ò–¢–ò–ß–ù–ò–ô –†–Ü–í–ï–ù–¨ –ó–ê–ì–†–û–ó–ò!",
            "–°–ò–°–¢–ï–ú–ê –ü–Ü–î –ó–ê–ì–†–û–ó–û–Æ!",
            "–ü–û–¢–†–Ü–ë–ù–ï –ù–ï–í–Ü–î–ö–õ–ê–î–ù–ï –í–¢–†–£–ß–ê–ù–ù–Ø!",
            "–ù–ï–í–Ü–î–ö–õ–ê–î–ù–Ü –ó–ê–•–û–î–ò –ü–û–¢–†–Ü–ë–ù–Ü!"
        ]
        
        cycle_count = 0
        
        while self.emergency_active:
            cycle_count += 1
            
            # –°–∏—Ä–µ–Ω–∞ - —à–≤–∏–¥–∫–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å —Ä—ñ–∑–Ω–∏—Ö —Ç–æ–Ω—ñ–≤
            siren_pattern = [1, 2, 3, 2, 1, 3, 2, 1]
            for tone in siren_pattern:
                if not self.emergency_active:
                    break
                    
                try:
                    subprocess.run(['osascript', '-e', f'beep {tone}'], 
                                 check=False, timeout=0.5)
                    time.sleep(0.1)
                except Exception:
                    pass
            
            # –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 2 —Ü–∏–∫–ª–∏
            if self.emergency_active and cycle_count % 2 == 0:
                message_idx = (cycle_count // 2) % len(emergency_messages)
                message = emergency_messages[message_idx]
                
                try:
                    subprocess.run([
                        'say', '-v', 'Alex', '-r', '300', message
                    ], check=False, timeout=5)
                except Exception:
                    pass
            
            # –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏ —Å–∏—Ä–µ–Ω–∏
            if self.emergency_active:
                time.sleep(1.5)
    
    def start_emergency_siren(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤–∞—Ä—ñ–π–Ω—É —Å–∏—Ä–µ–Ω—É"""
        if not self.emergency_active:
            self.emergency_active = True
            self.emergency_thread = threading.Thread(
                target=self.emergency_siren, 
                daemon=True,
                name="EmergencySiren"
            )
            self.emergency_thread.start()
            print(f"{Fore.RED}üö® –ê–í–ê–†–Ü–ô–ù–ê –°–ò–†–ï–ù–ê –ê–ö–¢–ò–í–û–í–ê–ù–ê üö®{Style.RESET_ALL}")
    
    def stop_emergency_siren(self):
        """–ó—É–ø–∏–Ω–∏—Ç–∏ –∞–≤–∞—Ä—ñ–π–Ω—É —Å–∏—Ä–µ–Ω—É"""
        if self.emergency_active:
            self.emergency_active = False
            if self.emergency_thread and self.emergency_thread.is_alive():
                self.emergency_thread.join(timeout=2)
            print(f"{Fore.YELLOW}üîá –ê–≤–∞—Ä—ñ–π–Ω–∞ —Å–∏—Ä–µ–Ω–∞ –∑—É–ø–∏–Ω–µ–Ω–∞{Style.RESET_ALL}")
    
    def trigger_alert(self, alert_type, threat_level, custom_message=None, details=None):
        """
        –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        
        Args:
            alert_type: –¢–∏–ø –∑–∞–≥—Ä–æ–∑–∏ (AlertType)
            threat_level: –†—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑–∏ (ThreatLevel)
            custom_message: –í–ª–∞—Å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            details: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–µ—Ç–∞–ª—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º–æ–∂–Ω–∞ –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        if not self.can_play_alert(alert_type, threat_level):
            return
        
        # –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        emoji = self.threat_emoji[threat_level]
        alert_info = self.alert_messages.get(alert_type, {})
        
        if custom_message:
            voice_message = custom_message
        else:
            voice_message = alert_info.get("short", "Security alert")
        
        if details:
            voice_message += f". {details}"
        elif not custom_message and "detailed" in alert_info:
            voice_message = alert_info["detailed"]
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"\n{emoji} {Fore.YELLOW}[{timestamp}] SOUND ALERT{Style.RESET_ALL}")
        print(f"   Type: {alert_type.value}")
        print(f"   Level: {threat_level.name}")
        print(f"   Message: {voice_message}")
        
        # –î–ª—è EMERGENCY —Ä—ñ–≤–Ω—è - –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏—Ä–µ–Ω—É
        if threat_level == ThreatLevel.EMERGENCY:
            self.start_emergency_siren()
            return
        
        # –í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—É–∫–∏ —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        def play_alert_sequence():
            try:
                # 1. –°–∏—Å—Ç–µ–º–Ω–∏–π –∑–≤—É–∫
                if self.system_sounds_enabled:
                    sound_name = self.system_sounds[threat_level]
                    self.play_system_sound(sound_name)
                    time.sleep(0.4)
                
                # 2. Beep –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å
                if self.beeps_enabled:
                    self.generate_beep_sequence(threat_level)
                    time.sleep(0.6)
                
                # 3. –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–¥–ª—è HIGH —Ç–∞ CRITICAL)
                if (self.voice_enabled and 
                    threat_level in [ThreatLevel.HIGH, ThreatLevel.CRITICAL]):
                    self.play_voice_alert(voice_message, threat_level)
                
            except Exception as e:
                print(f"{Fore.RED}‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}{Style.RESET_ALL}")
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å
        alert_thread = threading.Thread(
            target=play_alert_sequence, 
            daemon=True,
            name=f"Alert_{alert_type.value}_{threat_level.name}"
        )
        alert_thread.start()
    
    def enable_sound(self):
        """–£–≤—ñ–º–∫–Ω—É—Ç–∏ –≤—Å—ñ –∑–≤—É–∫–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
        self.sound_enabled = True
        print(f"{Fore.GREEN}üîä –ó–≤—É–∫–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ{Style.RESET_ALL}")
    
    def disable_sound(self):
        """–í–∏–º–∫–Ω—É—Ç–∏ –≤—Å—ñ –∑–≤—É–∫–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
        self.sound_enabled = False
        self.stop_emergency_siren()
        print(f"{Fore.YELLOW}üîá –ó–≤—É–∫–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ{Style.RESET_ALL}")
    
    def toggle_voice(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        self.voice_enabled = not self.voice_enabled
        status = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if self.voice_enabled else "–≤–∏–º–∫–Ω–µ–Ω–æ"
        print(f"{Fore.CYAN}üó£Ô∏è  –ì–æ–ª–æ—Å–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è {status}{Style.RESET_ALL}")
    
    def toggle_beeps(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ beep —Å–∏–≥–Ω–∞–ª–∏"""
        self.beeps_enabled = not self.beeps_enabled
        status = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if self.beeps_enabled else "–≤–∏–º–∫–Ω–µ–Ω–æ"
        print(f"{Fore.CYAN}üì¢ Beep —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è {status}{Style.RESET_ALL}")
    
    def test_alert_level(self, threat_level):
        """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑–∏"""
        print(f"{Fore.CYAN}üéµ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è {threat_level.name} —Ä—ñ–≤–Ω—è...{Style.RESET_ALL}")
        
        test_alert_type = AlertType.SYSTEM_ERROR
        test_message = f"–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è {threat_level.name} —Ä—ñ–≤–Ω—è"
        
        self.trigger_alert(test_alert_type, threat_level, test_message)
    
    def test_all_alerts(self):
        """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ —Ä—ñ–≤–Ω—ñ –∑–∞–≥—Ä–æ–∑"""
        print(f"{Fore.CYAN}üéµ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ä—ñ–≤–Ω—ñ–≤ —Å–ø–æ–≤—ñ—â–µ–Ω—å...{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}–ü—Ä–∏–º—ñ—Ç–∫–∞: –ö–æ–∂–µ–Ω —Ç–µ—Å—Ç –±—É–¥–µ –æ—á—ñ–∫—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª{Style.RESET_ALL}\n")
        
        test_cases = [
            (AlertType.SYSTEM_ERROR, ThreatLevel.LOW, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–∏–∑—å–∫–æ–≥–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É"),
            (AlertType.PERIPHERAL_DETECTED, ThreatLevel.MEDIUM, "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É"),
            (AlertType.SUSPICIOUS_PROCESS, ThreatLevel.HIGH, "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏—Å–æ–∫–æ–≥–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É"),
            (AlertType.NETWORK_INTRUSION, ThreatLevel.CRITICAL, "–ö—Ä–∏—Ç–∏—á–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞ –±–µ–∑–ø–µ–∫–∏"),
        ]
        
        for i, (alert_type, threat_level, message) in enumerate(test_cases, 1):
            print(f"[{i}/4] –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è {threat_level.name} —Ä—ñ–≤–Ω—è...")
            self.trigger_alert(alert_type, threat_level, message)
            
            # –ü–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
            if i < len(test_cases):
                wait_time = 4
                print(f"   –û—á—ñ–∫—É–≤–∞–Ω–Ω—è {wait_time}—Å –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º —Ç–µ—Å—Ç–æ–º...")
                time.sleep(wait_time)
        
        print(f"\n{Fore.GREEN}‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}–ü—Ä–∏–º—ñ—Ç–∫–∞: EMERGENCY —Ä—ñ–≤–µ–Ω—å –Ω–µ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'emergency'){Style.RESET_ALL}")
    
    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"""
        print(f"\n{Fore.CYAN}üîä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏ –∑–≤—É–∫–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å NIMDA{Style.RESET_ALL}")
        print("=" * 40)
        print(f"–ó–≤—É–∫–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞: {'üü¢ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if self.sound_enabled else 'üî¥ –í–∏–º–∫–Ω–µ–Ω–æ'}")
        print(f"–ì–æ–ª–æ—Å–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {'üü¢ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if self.voice_enabled else 'üî¥ –í–∏–º–∫–Ω–µ–Ω–æ'}")
        print(f"Beep —Å–∏–≥–Ω–∞–ª–∏: {'üü¢ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if self.beeps_enabled else 'üî¥ –í–∏–º–∫–Ω–µ–Ω–æ'}")
        print(f"–°–∏—Å—Ç–µ–º–Ω—ñ –∑–≤—É–∫–∏: {'üü¢ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if self.system_sounds_enabled else 'üî¥ –í–∏–º–∫–Ω–µ–Ω–æ'}")
        print(f"–ê–≤–∞—Ä—ñ–π–Ω–∞ —Å–∏—Ä–µ–Ω–∞: {'üö® –ê–ö–¢–ò–í–ù–ê' if self.emergency_active else 'üîá –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}")
        print()
        
        print("–Ü–Ω—Ç–µ—Ä–≤–∞–ª–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å:")
        for level, interval in self.alert_intervals.items():
            emoji = self.threat_emoji[level]
            print(f"  {emoji} {level.name}: {interval}—Å")
        print()
        
        if self.last_alert_time:
            print("–û—Å—Ç–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:")
            for key, timestamp in list(self.last_alert_time.items())[-5:]:
                time_str = datetime.fromtimestamp(timestamp).strftime("%H:%M:%S")
                print(f"  {time_str}: {key}")
        else:
            print("–ù–µ–º–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å")


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º–∏
sound_system = None

def get_sound_system():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º–∏ –∑–≤—É–∫—ñ–≤"""
    global sound_system
    if sound_system is None:
        sound_system = SoundAlertSystem()
    return sound_system

def play_alert(alert_type, threat_level, message=None, details=None):
    """–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    system = get_sound_system()
    system.trigger_alert(alert_type, threat_level, message, details)

def emergency_alert(message="–ù–ê–î–ó–í–ò–ß–ê–ô–ù–ê –°–ò–¢–£–ê–¶–Ü–Ø"):
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤–∞—Ä—ñ–π–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
    system = get_sound_system()
    system.trigger_alert(AlertType.LOCKDOWN_BREACH, ThreatLevel.EMERGENCY, message)

def stop_emergency():
    """–ó—É–ø–∏–Ω–∏—Ç–∏ –∞–≤–∞—Ä—ñ–π–Ω—É —Å–∏—Ä–µ–Ω—É"""
    system = get_sound_system()
    system.stop_emergency_siren()

if __name__ == "__main__":
    print(f"{Fore.CYAN}–†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å NIMDA{Style.RESET_ALL}")
    print("=" * 50)
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É
    system = SoundAlertSystem()
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "test":
            system.test_all_alerts()
        elif command == "emergency":
            print(f"{Fore.RED}–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è EMERGENCY —Ä—ñ–≤–Ω—è...{Style.RESET_ALL}")
            emergency_alert("–¢–ï–°–¢ –ù–ê–î–ó–í–ò–ß–ê–ô–ù–û–á –°–ò–¢–£–ê–¶–Ü–á")
            print("–ê–≤–∞—Ä—ñ–π–Ω–∞ —Å–∏—Ä–µ–Ω–∞ –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
            stop_emergency()
        elif command == "status":
            system.show_status()
        elif command in ["low", "medium", "high", "critical"]:
            level = ThreatLevel[command.upper()]
            system.test_alert_level(level)
        elif command == "interactive":
            # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
            print(f"\n{Fore.GREEN}–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º - –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥–∏:{Style.RESET_ALL}")
            print("–ö–æ–º–∞–Ω–¥–∏: test, status, low, medium, high, critical, emergency, voice, beeps, enable, disable, quit")
            
            while True:
                try:
                    cmd = input(f"\n{Fore.CYAN}nimda-sound>{Style.RESET_ALL} ").strip().lower()
                    
                    if cmd in ["quit", "exit", "q"]:
                        break
                    elif cmd == "test":
                        system.test_all_alerts()
                    elif cmd == "status":
                        system.show_status()
                    elif cmd == "emergency":
                        emergency_alert("–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç –∞–≤–∞—Ä—ñ–π–Ω–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó")
                        time.sleep(3)
                        stop_emergency()
                    elif cmd == "voice":
                        system.toggle_voice()
                    elif cmd == "beeps":
                        system.toggle_beeps()
                    elif cmd == "enable":
                        system.enable_sound()
                    elif cmd == "disable":
                        system.disable_sound()
                    elif cmd in ["low", "medium", "high", "critical"]:
                        level = ThreatLevel[cmd.upper()]
                        system.test_alert_level(level)
                    else:
                        print(f"{Fore.YELLOW}–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {cmd}{Style.RESET_ALL}")
                        
                except KeyboardInterrupt:
                    break
                except Exception as e:
                    print(f"{Fore.RED}–ü–æ–º–∏–ª–∫–∞: {e}{Style.RESET_ALL}")
            
            print(f"\n{Fore.GREEN}–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {sys.argv[1]}{Style.RESET_ALL}")
    else:
        print("\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:")
        print("  python3 sound_alerts_enhanced.py test         - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ —Ä—ñ–≤–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å")
        print("  python3 sound_alerts_enhanced.py emergency   - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –∞–≤–∞—Ä—ñ–π–Ω—É —Å–∏—Ä–µ–Ω—É")
        print("  python3 sound_alerts_enhanced.py status      - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏")
        print("  python3 sound_alerts_enhanced.py low         - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ LOW —Ä—ñ–≤–µ–Ω—å")
        print("  python3 sound_alerts_enhanced.py medium      - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ MEDIUM —Ä—ñ–≤–µ–Ω—å") 
        print("  python3 sound_alerts_enhanced.py high        - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ HIGH —Ä—ñ–≤–µ–Ω—å")
        print("  python3 sound_alerts_enhanced.py critical    - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ CRITICAL —Ä—ñ–≤–µ–Ω—å")
        print("  python3 sound_alerts_enhanced.py interactive - –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º")
        print(f"\n{Fore.GREEN}–ü—Ä–∏–∫–ª–∞–¥:{Style.RESET_ALL}")
        print("  python3 sound_alerts_enhanced.py test")
