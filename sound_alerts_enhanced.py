#!/usr/bin/env python3
"""
Enhanced Sound Alert System for NIMDA Security
Different sounds for different threat levels using macOS system sounds

–ü—ñ–¥—Ç—Ä–∏–º—É—î:
- 5 —Ä—ñ–≤–Ω—ñ–≤ –∑–∞–≥—Ä–æ–∑ (–≤—ñ–¥ LOW –¥–æ EMERGENCY)
- 8 —Ç–∏–ø—ñ–≤ –∑–∞–≥—Ä–æ–∑ (–º–µ—Ä–µ–∂–∞, –ø—Ä–æ—Ü–µ—Å–∏, GPU, peripherals, —Ç–æ—â–æ)
- –†–æ–∑—É–º–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ –º—ñ–∂ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏
- –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω—ñ –∑–≤—É–∫–∏: —Å–∏—Å—Ç–µ–º–Ω—ñ + beep + –≥–æ–ª–æ—Å
- –ê–≤–∞—Ä—ñ–π–Ω–∞ —Å–∏—Ä–µ–Ω–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π
"""

import sys
import time
import threading
import subprocess
from enum import Enum
from colorama import Fore, Style, init

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è colorama
init()

# –Ü–º–ø–æ—Ä—Ç ThreatLevel –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
try:
    from nimda_integrated import ThreatLevel
except ImportError:
    # Fallback —è–∫—â–æ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ
    class ThreatLevel(Enum):
        """Threat levels with corresponding sound types"""
        LOW = ("low", "Ping")
        MEDIUM = ("medium", "Sosumi") 
        HIGH = ("high", "Basso")
        CRITICAL = ("critical", "Frog")
        EMERGENCY = ("emergency", "Glass")

class SoundAlertSystem:
    """Enhanced sound alert system with different sounds for threat levels"""
    
    def __init__(self):
        self.enabled = True
        self.volume = 0.7
        self.sound_threads = []
        self.last_alert_time = {}
        self.alert_cooldown = 2.0  # seconds between same alerts
        
        # System sound mappings for different threat levels
        self.threat_sounds = {
            ThreatLevel.LOW: {
                'system': 'Ping',
                'description': 'Gentle ping for low threats',
                'volume': 0.3
            },
            ThreatLevel.MEDIUM: {
                'system': 'Sosumi', 
                'description': 'Warning sound for medium threats',
                'volume': 0.5
            },
            ThreatLevel.HIGH: {
                'system': 'Basso',
                'description': 'Alert sound for high threats',
                'volume': 0.7
            },
            ThreatLevel.CRITICAL: {
                'system': 'Frog',
                'description': 'Critical alert sound',
                'volume': 0.8
            },
            ThreatLevel.EMERGENCY: {
                'system': 'Glass',
                'description': 'Emergency break glass sound',
                'volume': 1.0
            }
        }
        
        # Custom alert patterns
        self.alert_patterns = {
            'network_attack': {
                'sounds': [ThreatLevel.HIGH, ThreatLevel.CRITICAL],
                'pattern': [0.5, 1.0, 0.5, 1.0],  # delays between sounds
                'description': 'Network attack detected'
            },
            'suspicious_process': {
                'sounds': [ThreatLevel.MEDIUM, ThreatLevel.HIGH],
                'pattern': [0.3, 0.8, 0.3],
                'description': 'Suspicious process detected'
            },
            'data_breach': {
                'sounds': [ThreatLevel.CRITICAL, ThreatLevel.EMERGENCY, ThreatLevel.CRITICAL],
                'pattern': [0.2, 0.5, 0.2, 0.5, 0.2],
                'description': 'Data breach detected'
            },
            'system_compromise': {
                'sounds': [ThreatLevel.EMERGENCY, ThreatLevel.EMERGENCY, ThreatLevel.EMERGENCY],
                'pattern': [0.1, 0.1, 0.1, 0.5, 0.1, 0.1, 0.1],
                'description': 'System compromise detected'
            }
        }
        
        # –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –Ü–ù–¢–ï–†–í–ê–õ–Ü–í –ú–Ü–ñ –°–ü–û–í–Ü–©–ï–ù–ù–Ø–ú–ò
        # –ß–∞—Å —É —Å–µ–∫—É–Ω–¥–∞—Ö –º—ñ–∂ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏ —Ç–æ–≥–æ –∂ —Ç–∏–ø—É
        self.alert_intervals = {
            ThreatLevel.LOW: 60,       # 1 —Ö–≤–∏–ª–∏–Ω–∞ - —Ä—ñ–¥–∫–æ
            ThreatLevel.MEDIUM: 30,    # 30 —Å–µ–∫—É–Ω–¥ - –ø–æ–º—ñ—Ä–Ω–æ
            ThreatLevel.HIGH: 10,      # 10 —Å–µ–∫—É–Ω–¥ - —á–∞—Å—Ç–æ
            ThreatLevel.CRITICAL: 5,   # 5 —Å–µ–∫—É–Ω–¥ - –¥—É–∂–µ —á–∞—Å—Ç–æ
            ThreatLevel.EMERGENCY: 2   # 2 —Å–µ–∫—É–Ω–¥–∏ - –ø–æ—Å—Ç—ñ–π–Ω–æ
        }
        
        # –°–ò–°–¢–ï–ú–ù–Ü –ó–í–£–ö–ò macOS
        # –ö–æ–∂–µ–Ω —Ä—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑–∏ –º–∞—î —Å–≤—ñ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∏–π –∑–≤—É–∫
        self.system_sounds = {
            ThreatLevel.LOW: "Tink",        # –ú'—è–∫–∏–π —Ç–∏—Ö–∏–π –∑–≤—É–∫
            ThreatLevel.MEDIUM: "Pop",      # –ü–æ–º—ñ—Ç–Ω–∏–π –∑–≤—É–∫
            ThreatLevel.HIGH: "Sosumi",     # –†—ñ–∑–∫–∏–π —É–≤–∞–≥–∞-–∑–≤—É–∫
            ThreatLevel.CRITICAL: "Basso",  # –ì–ª–∏–±–æ–∫–∏–π —Å–µ—Ä–π–æ–∑–Ω–∏–π –∑–≤—É–∫
            ThreatLevel.EMERGENCY: "Funk"   # –ù–∞–π–≥—É—á–Ω—ñ—à–∏–π —Ç—Ä–∏–≤–æ–∂–Ω–∏–π –∑–≤—É–∫
        }
        
        # –ü–ê–¢–ï–†–ù–ò BEEP –°–ò–ì–ù–ê–õ–Ü–í
        # –ö–æ–∂–µ–Ω —Ä—ñ–≤–µ–Ω—å –º–∞—î —É–Ω—ñ–∫–∞–ª—å–Ω—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å
        self.beep_patterns = {
            ThreatLevel.LOW: [1],              # ‚Ä¢ (–æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π)
            ThreatLevel.MEDIUM: [1, 1],        # ‚Ä¢‚Ä¢ (–¥–≤–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö)
            ThreatLevel.HIGH: [1, 1, 1],       # ‚Ä¢‚Ä¢‚Ä¢ (—Ç—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö)
            ThreatLevel.CRITICAL: [2, 1, 2],   # -‚Ä¢- (–¥–æ–≤–≥–∏–π-–∫–æ—Ä–æ—Ç–∫–∏–π-–¥–æ–≤–≥–∏–π)
            ThreatLevel.EMERGENCY: [3, 3, 3]   # --- (—Ç—Ä–∏ –¥–æ–≤–≥–∏—Ö - SOS —Å—Ç–∏–ª—å)
        }
        
        # –ì–û–õ–û–°–û–í–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
        # –†—ñ–∑–Ω—ñ –≥–æ–ª–æ—Å–∏ —Ç–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
        self.voice_settings = {
            ThreatLevel.LOW: {"voice": "Alex", "rate": "180"},        # –°–ø–æ–∫—ñ–π–Ω–∏–π
            ThreatLevel.MEDIUM: {"voice": "Victoria", "rate": "200"}, # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π
            ThreatLevel.HIGH: {"voice": "Daniel", "rate": "230"},     # –ï–Ω–µ—Ä–≥—ñ–π–Ω–∏–π
            ThreatLevel.CRITICAL: {"voice": "Fiona", "rate": "250"},  # –°–µ—Ä–π–æ–∑–Ω–∏–π
            ThreatLevel.EMERGENCY: {"voice": "Alex", "rate": "280"}   # –®–≤–∏–¥–∫–∏–π
        }
        
        # EMOJI –î–õ–Ø –†–Ü–ó–ù–ò–• –†–Ü–í–ù–Ü–í
        self.threat_emoji = {
            ThreatLevel.LOW: "üü¢",
            ThreatLevel.MEDIUM: "üü°", 
            ThreatLevel.HIGH: "üü†",
            ThreatLevel.CRITICAL: "üî¥",
            ThreatLevel.EMERGENCY: "üö®"
        }
        
        print(f"{Fore.GREEN}üîä –°–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å NIMDA —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞{Style.RESET_ALL}")
        self._print_configuration()
    
    def _print_configuration(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Å–∏—Å—Ç–µ–º–∏"""
        print(f"{Fore.CYAN}–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:{Style.RESET_ALL}")
        print(f"  –Ü–Ω—Ç–µ—Ä–≤–∞–ª–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å: {dict((k.name, f'{v}—Å') for k, v in self.alert_intervals.items())}")
    
    def can_play_alert(self, alert_type, threat_level):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º–æ–∂–Ω–∞ –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        
        –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é—î —á–∞—Å—Ç–æ—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —â–æ–± –Ω–µ —Å–ø–∞–º–∏—Ç–∏
        """
        if not self.enabled:
            return False
        
        current_time = time.time()
        key = f"{alert_type.value}_{threat_level.name}"
        
        if key in self.last_alert_time:
            interval = self.alert_intervals[threat_level]
            time_passed = current_time - self.last_alert_time[key]
            
            if time_passed < interval:
                remaining = interval - time_passed
                print(f"{Fore.YELLOW}‚è±Ô∏è  –û—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: –∑–∞–ª–∏—à–∏–ª–æ—Å—è {remaining:.1f}—Å{Style.RESET_ALL}")
                return False
        
        self.last_alert_time[key] = current_time
        return True
    
    def play_system_sound(self, sound_name: str, volume: float = 0.7):
        """Play macOS system sound"""
        try:
            # Use afplay to play system sounds
            cmd = ['afplay', '-v', str(volume), f'/System/Library/Sounds/{sound_name}.aiff']
            subprocess.run(cmd, capture_output=True, timeout=5)
        except Exception as e:
            print(f"Failed to play system sound {sound_name}: {e}")
    
    def play_threat_alert(self, threat_level: ThreatLevel, target: str = ""):
        """Play sound alert for specific threat level"""
        if not self.enabled:
            return
            
        # Check cooldown
        alert_key = f"{threat_level.value[0]}_{target}"
        current_time = time.time()
        if alert_key in self.last_alert_time:
            if current_time - self.last_alert_time[alert_key] < self.alert_cooldown:
                return
        
        self.last_alert_time[alert_key] = current_time
        
        # Get sound configuration
        sound_config = self.threat_sounds.get(threat_level)
        if not sound_config:
            return
        
        # Play sound in separate thread
        def play_sound():
            try:
                self.play_system_sound(sound_config['system'], sound_config['volume'])
                print(f"üîä {threat_level.value[0].upper()} ALERT: {sound_config['description']} - {target}")
            except Exception as e:
                print(f"Sound alert error: {e}")
        
        thread = threading.Thread(target=play_sound, daemon=True)
        thread.start()
        self.sound_threads.append(thread)
    
    def play_alert_pattern(self, pattern_name: str, target: str = ""):
        """Play complex alert pattern for specific events"""
        if not self.enabled:
            return
            
        pattern = self.alert_patterns.get(pattern_name)
        if not pattern:
            return
        
        def play_pattern():
            try:
                for i, sound_level in enumerate(pattern['sounds']):
                    sound_config = self.threat_sounds.get(sound_level)
                    if sound_config:
                        self.play_system_sound(sound_config['system'], sound_config['volume'])
                    
                    # Wait for next sound
                    if i < len(pattern['pattern']):
                        time.sleep(pattern['pattern'][i])
                
                print(f"üîä PATTERN ALERT: {pattern['description']} - {target}")
            except Exception as e:
                print(f"Pattern alert error: {e}")
        
        thread = threading.Thread(target=play_pattern, daemon=True)
        thread.start()
        self.sound_threads.append(thread)
    
    def play_custom_sequence(self, sounds: list, delays: list, description: str = ""):
        """Play custom sequence of sounds"""
        if not self.enabled:
            return
        
        def play_sequence():
            try:
                for i, sound_level in enumerate(sounds):
                    sound_config = self.threat_sounds.get(sound_level)
                    if sound_config:
                        self.play_system_sound(sound_config['system'], sound_config['volume'])
                    
                    # Wait for next sound
                    if i < len(delays):
                        time.sleep(delays[i])
                
                if description:
                    print(f"üîä CUSTOM ALERT: {description}")
            except Exception as e:
                print(f"Custom sequence error: {e}")
        
        thread = threading.Thread(target=play_sequence, daemon=True)
        thread.start()
        self.sound_threads.append(thread)
    
    def test_sounds(self):
        """Test all available sounds"""
        print("üîä Testing Sound Alert System...")
        
        for threat_level in ThreatLevel:
            print(f"\nTesting {threat_level.value[0].upper()} level...")
            self.play_threat_alert(threat_level, "TEST")
            time.sleep(1)
        
        print("\nTesting alert patterns...")
        for pattern_name in self.alert_patterns:
            print(f"\nTesting {pattern_name} pattern...")
            self.play_alert_pattern(pattern_name, "TEST")
            time.sleep(2)
        
        print("\n‚úÖ Sound test completed!")
    
    def set_volume(self, volume: float):
        """Set system volume (0.0 to 1.0)"""
        self.volume = max(0.0, min(1.0, volume))
    
    def enable(self):
        """Enable sound alerts"""
        self.enabled = True
        print("üîä Sound alerts enabled")
    
    def disable(self):
        """Disable sound alerts"""
        self.enabled = False
        print("üîá Sound alerts disabled")
    
    def cleanup(self):
        """Clean up sound threads"""
        for thread in self.sound_threads:
            if thread.is_alive():
                thread.join(timeout=1.0)
        self.sound_threads.clear()

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º–∏
sound_system = None

def get_sound_system():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º–∏ –∑–≤—É–∫—ñ–≤"""
    global sound_system
    if sound_system is None:
        sound_system = SoundAlertSystem()
    return sound_system

def emergency_alert(message="–ù–ê–î–ó–í–ò–ß–ê–ô–ù–ê –°–ò–¢–£–ê–¶–Ü–Ø"):
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤–∞—Ä—ñ–π–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
    system = get_sound_system()
    system.play_threat_alert(ThreatLevel.EMERGENCY, message)

def stop_emergency():
    """–ó—É–ø–∏–Ω–∏—Ç–∏ –∞–≤–∞—Ä—ñ–π–Ω—É —Å–∏—Ä–µ–Ω—É"""
    system = get_sound_system()
    system.cleanup()

if __name__ == "__main__":
    print(f"{Fore.CYAN}–†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å NIMDA{Style.RESET_ALL}")
    print("=" * 50)
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É
    system = SoundAlertSystem()
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "test":
            system.test_sounds()
        elif command == "emergency":
            print(f"{Fore.RED}–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è EMERGENCY —Ä—ñ–≤–Ω—è...{Style.RESET_ALL}")
            emergency_alert("–¢–ï–°–¢ –ù–ê–î–ó–í–ò–ß–ê–ô–ù–û–á –°–ò–¢–£–ê–¶–Ü–á")
            print("–ê–≤–∞—Ä—ñ–π–Ω–∞ —Å–∏—Ä–µ–Ω–∞ –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
            stop_emergency()
        elif command == "status":
            system.show_status()
        elif command in ["low", "medium", "high", "critical"]:
            level = ThreatLevel[command.upper()]
            system.test_alert_level(level)
        elif command == "interactive":
            # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
            print(f"\n{Fore.GREEN}–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º - –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥–∏:{Style.RESET_ALL}")
            print("–ö–æ–º–∞–Ω–¥–∏: test, status, low, medium, high, critical, emergency, voice, beeps, enable, disable, quit")
            
            while True:
                try:
                    cmd = input(f"\n{Fore.CYAN}nimda-sound>{Style.RESET_ALL} ").strip().lower()
                    
                    if cmd in ["quit", "exit", "q"]:
                        break
                    elif cmd == "test":
                        system.test_sounds()
                    elif cmd == "status":
                        system.show_status()
                    elif cmd == "emergency":
                        emergency_alert("–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç –∞–≤–∞—Ä—ñ–π–Ω–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó")
                        time.sleep(3)
                        stop_emergency()
                    elif cmd == "voice":
                        system.toggle_voice()
                    elif cmd == "beeps":
                        system.toggle_beeps()
                    elif cmd == "enable":
                        system.enable()
                    elif cmd == "disable":
                        system.disable()
                    elif cmd in ["low", "medium", "high", "critical"]:
                        level = ThreatLevel[cmd.upper()]
                        system.test_alert_level(level)
                    else:
                        print(f"{Fore.YELLOW}–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {cmd}{Style.RESET_ALL}")
                        
                except KeyboardInterrupt:
                    break
                except Exception as e:
                    print(f"{Fore.RED}–ü–æ–º–∏–ª–∫–∞: {e}{Style.RESET_ALL}")
            
            print(f"\n{Fore.GREEN}–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {sys.argv[1]}{Style.RESET_ALL}")
    else:
        print("\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:")
        print("  python3 sound_alerts_enhanced.py test         - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ —Ä—ñ–≤–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å")
        print("  python3 sound_alerts_enhanced.py emergency   - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –∞–≤–∞—Ä—ñ–π–Ω—É —Å–∏—Ä–µ–Ω—É")
        print("  python3 sound_alerts_enhanced.py status      - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏")
        print("  python3 sound_alerts_enhanced.py low         - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ LOW —Ä—ñ–≤–µ–Ω—å")
        print("  python3 sound_alerts_enhanced.py medium      - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ MEDIUM —Ä—ñ–≤–µ–Ω—å") 
        print("  python3 sound_alerts_enhanced.py high        - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ HIGH —Ä—ñ–≤–µ–Ω—å")
        print("  python3 sound_alerts_enhanced.py critical    - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ CRITICAL —Ä—ñ–≤–µ–Ω—å")
        print("  python3 sound_alerts_enhanced.py interactive - –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º")
        print(f"\n{Fore.GREEN}–ü—Ä–∏–∫–ª–∞–¥:{Style.RESET_ALL}")
        print("  python3 sound_alerts_enhanced.py test")
