#!/usr/bin/env python3
"""
NIMDA Integrated Security System
–Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–ø–µ–∫–∏ –∑ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º –º–µ–Ω—é —Ç–∞ –±–∞–≥–∞—Ç–æ–µ–∫—Ä–∞–Ω–Ω–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
"""

import os
import sys
import subprocess
import time
import signal
import psutil
import json
import hmac
import secrets
import threading
from datetime import datetime
from collections import deque
from enum import Enum
from colorama import init, Fore, Style

init()

class NIMDAIntegrated:
    def __init__(self):
        self.running = True
        self.lockdown_active = False
        self.menu_active = True
        self.monitors = {}
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ –¥–µ–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        self.network_data = deque(maxlen=1000)
        self.processes_data = deque(maxlen=500)
        self.gpu_data = deque(maxlen=500)
        self.security_events = deque(maxlen=1000)
        self.anomalies = deque(maxlen=500)
        self.system_logs = deque(maxlen=1000)
        
        # –ü—ñ–¥–æ–∑—Ä—ñ–ª—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏
        self.suspicious_ports = {22, 2222, 4444, 5555, 8080, 9999, 31337, 1337}
        self.suspicious_processes = {'ssh', 'sshd', 'nc', 'netcat', 'ncat', 'socat', 'telnet'}
        self.mining_processes = {'xmrig', 'ethminer', 'cgminer', 'bfgminer', 'claymore'}
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø—ñ–¥—Å–∏—Å—Ç–µ–º–∏
        self.secure_enclave = SecureEnclaveKey()
        self.lockdown_system = LockdownSystem()
        self.sound_alert_system = SoundAlertSystem()
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
    def signal_handler(self, signum, frame):
        """–û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è"""
        print(f"\n{Fore.YELLOW}üõë Received signal {signum}, shutting down...{Style.RESET_ALL}")
        self.running = False
        self.menu_active = False
        
    def print_banner(self):
        """–ë–∞–Ω–µ—Ä —Å–∏—Å—Ç–µ–º–∏"""
        print(f"{Fore.CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print("‚ïë                          NIMDA INTEGRATED SECURITY                          ‚ïë")
        print("‚ïë                      –Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–ø–µ–∫–∏                           ‚ïë")
        print("‚ïë                                                                            ‚ïë")
        print("‚ïë    üîê Lockdown System    üìä Multi-Monitor    üîß Interactive Control       ‚ïë")
        print(f"‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Style.RESET_ALL}")
        
    def setup_tmux_layout(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ TMUX –∑ 6 –º–æ–Ω—ñ—Ç–æ—Ä–∞–º–∏ —Ç–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º –º–µ–Ω—é"""
        print(f"{Fore.CYAN}üöÄ Setting up NIMDA integrated interface...{Style.RESET_ALL}")
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ —ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é
        subprocess.run(["tmux", "kill-session", "-t", "nimda_integrated"], check=False)
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é
        subprocess.run([
            "tmux", "new-session", "-d", "-s", "nimda_integrated", 
            "-x", "200", "-y", "60"  # –í–µ–ª–∏–∫–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è 6 –ø–∞–Ω–µ–ª–µ–π
        ])
        
        # –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ –≤—ñ–∫–Ω–æ
        subprocess.run(["tmux", "rename-window", "-t", "nimda_integrated:0", "NIMDA"])
        
        # –†–æ–∑–¥—ñ–ª–∏—Ç–∏ –Ω–∞ 6 –ø–∞–Ω–µ–ª–µ–π
        # –í–µ—Ä—Ö–Ω—ñ–π —Ä—è–¥: Network | Processes | GPU
        subprocess.run(["tmux", "split-window", "-t", "nimda_integrated:NIMDA", "-h"])  # Horizontal split
        subprocess.run(["tmux", "split-window", "-t", "nimda_integrated:NIMDA.1", "-h"])  # Split right pane
        
        # –ù–∏–∂–Ω—ñ–π —Ä—è–¥: Security | Logs | System
        subprocess.run(["tmux", "split-window", "-t", "nimda_integrated:NIMDA.0", "-v"])  # Vertical split left
        subprocess.run(["tmux", "split-window", "-t", "nimda_integrated:NIMDA.2", "-v"])  # Vertical split middle
        subprocess.run(["tmux", "split-window", "-t", "nimda_integrated:NIMDA.4", "-v"])  # Vertical split right
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–∫—Ä–µ–º–∏–π –º–∞–ª–µ–Ω—å–∫–∏–π –ø–µ–π–Ω –¥–ª—è –º–µ–Ω—é –≤–Ω–∏–∑—É
        subprocess.run(["tmux", "split-window", "-t", "nimda_integrated:NIMDA", "-v", "-l", "12"])  # 12 —Ä—è–¥–∫—ñ–≤ –¥–ª—è –º–µ–Ω—é
        
        time.sleep(1)  # –î–∞—Ç–∏ —á–∞—Å –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª–µ–π
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤ –∫–æ–∂–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ
        monitors = [
            ("nimda_integrated:NIMDA.0", f"python3 -c \"import sys; sys.path.append('{os.getcwd()}'); from nimda_integrated import NetworkMonitor; NetworkMonitor().run()\""),
            ("nimda_integrated:NIMDA.1", f"python3 -c \"import sys; sys.path.append('{os.getcwd()}'); from nimda_integrated import ProcessMonitor; ProcessMonitor().run()\""),
            ("nimda_integrated:NIMDA.2", f"python3 -c \"import sys; sys.path.append('{os.getcwd()}'); from nimda_integrated import GPUMonitor; GPUMonitor().run()\""),
            ("nimda_integrated:NIMDA.3", f"python3 -c \"import sys; sys.path.append('{os.getcwd()}'); from nimda_integrated import SecurityMonitor; SecurityMonitor().run()\""),
            ("nimda_integrated:NIMDA.4", f"python3 -c \"import sys; sys.path.append('{os.getcwd()}'); from nimda_integrated import LogMonitor; LogMonitor().run()\""),
            ("nimda_integrated:NIMDA.5", f"python3 -c \"import sys; sys.path.append('{os.getcwd()}'); from nimda_integrated import SystemMonitor; SystemMonitor().run()\""),
            ("nimda_integrated:NIMDA.6", f"python3 -c \"import sys; sys.path.append('{os.getcwd()}'); from nimda_integrated import InteractiveMenu; InteractiveMenu().run()\"")
        ]
        
        for pane, command in monitors:
            subprocess.run(["tmux", "send-keys", "-t", pane, command, "Enter"])
        
        # –§–æ–∫—É—Å –Ω–∞ –º–µ–Ω—é
        subprocess.run(["tmux", "select-pane", "-t", "nimda_integrated:NIMDA.6"])
        
        print(f"{Fore.GREEN}‚úÖ TMUX layout created successfully{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}üìã Interface Guide:{Style.RESET_ALL}")
        print("  ‚Ä¢ –ü–∞–Ω–µ–ª—å 0: Network Monitor")
        print("  ‚Ä¢ –ü–∞–Ω–µ–ª—å 1: Process Monitor") 
        print("  ‚Ä¢ –ü–∞–Ω–µ–ª—å 2: GPU Monitor")
        print("  ‚Ä¢ –ü–∞–Ω–µ–ª—å 3: Security Events")
        print("  ‚Ä¢ –ü–∞–Ω–µ–ª—å 4: System Logs")
        print("  ‚Ä¢ –ü–∞–Ω–µ–ª—å 5: System Info")
        print("  ‚Ä¢ –ü–∞–Ω–µ–ª—å 6: Interactive Menu (Control Panel)")
        print(f"\n{Fore.CYAN}üéÆ Navigation:{Style.RESET_ALL}")
        print("  ‚Ä¢ Ctrl+B + Arrow Keys - –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –º—ñ–∂ –ø–∞–Ω–µ–ª–∞–º–∏")
        print("  ‚Ä¢ Ctrl+L - –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ lockdown (–∑ –º–µ–Ω—é)")
        print("  ‚Ä¢ Ctrl+C - –≤–∏—Ö—ñ–¥")
        
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω—É —Å–∏—Å—Ç–µ–º—É"""
        self.print_banner()
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ TMUX —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.setup_tmux_layout()
        
        # –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Å—ñ—ó
        try:
            subprocess.run(["tmux", "attach-session", "-t", "nimda_integrated"])
        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}üëã Exiting NIMDA...{Style.RESET_ALL}")
        finally:
            self.cleanup()
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ—Å—É—Ä—Å–∏ –ø–µ—Ä–µ–¥ –≤–∏—Ö–æ–¥–æ–º"""
        print(f"{Fore.CYAN}üßπ Cleaning up...{Style.RESET_ALL}")
        subprocess.run(["tmux", "kill-session", "-t", "nimda_integrated"], check=False)
        
        if self.lockdown_active:
            print(f"{Fore.YELLOW}üîì Disabling lockdown...{Style.RESET_ALL}")
            self.lockdown_system.disable_lockdown()


class SecureEnclaveKey:
    """–°–∏—Å—Ç–µ–º–∞ —Ä–æ–±–æ—Ç–∏ –∑ –∫–ª—é—á–∞–º–∏ –¥–ª—è lockdown"""
    
    def __init__(self):
        self.key_id = "nimda_lockdown_key"
        self.key_exists = self.check_key_exists()
    
    def check_key_exists(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–ª—é—á–∞"""
        key_file = os.path.expanduser("~/.nimda_lockdown_key")
        return os.path.exists(key_file)
    
    def create_key(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∫–ª—é—á"""
        try:
            key_data = secrets.token_bytes(32)
            key_file = os.path.expanduser("~/.nimda_lockdown_key")
            
            with open(key_file, 'wb') as f:
                f.write(key_data)
            os.chmod(key_file, 0o600)
            
            self.key_exists = True
            return True
        except Exception as e:
            print(f"Error creating key: {e}")
            return False
    
    def get_key(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—é—á"""
        try:
            key_file = os.path.expanduser("~/.nimda_lockdown_key")
            if os.path.exists(key_file):
                with open(key_file, 'rb') as f:
                    return f.read()
            return None
        except Exception:
            return None
    
    def verify_key(self, provided_key):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–ª—é—á"""
        stored_key = self.get_key()
        if stored_key is None:
            return False
        return hmac.compare_digest(stored_key, provided_key.encode())


class LockdownSystem:
    """–°–∏—Å—Ç–µ–º–∞ lockdown –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–∏—Ñ–µ—Ä—ñ—ó"""
    
    def __init__(self):
        self.active = False
        self.blocked_services = []
        self.sound_system = SoundAlertSystem()
        
    def enable_lockdown(self):
        """–£–≤—ñ–º–∫–Ω—É—Ç–∏ lockdown"""
        try:
            print(f"{Fore.RED}üîí Enabling lockdown mode...{Style.RESET_ALL}")
            
            # –ó–≤—É–∫–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ—é lockdown
            self.sound_system.trigger_alert(
                AlertType.LOCKDOWN_BREACH,
                ThreatLevel.CRITICAL,
                "Lockdown mode activated. All external connections blocked."
            )
            
            # –ë–ª–æ–∫—É—î–º–æ WiFi
            subprocess.run(["sudo", "ifconfig", "en0", "down"], check=False)
            self.blocked_services.append("WiFi")
            
            # –ë–ª–æ–∫—É—î–º–æ Bluetooth
            subprocess.run(["sudo", "defaults", "write", "/Library/Preferences/com.apple.Bluetooth", "ControllerPowerState", "-int", "0"], check=False)
            self.blocked_services.append("Bluetooth")
            
            self.active = True
            print(f"{Fore.GREEN}‚úÖ Lockdown enabled. Blocked: {', '.join(self.blocked_services)}{Style.RESET_ALL}")
            return True
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå Lockdown failed: {e}{Style.RESET_ALL}")
            self.sound_system.trigger_alert(
                AlertType.SYSTEM_ERROR,
                ThreatLevel.HIGH,
                f"Lockdown activation failed: {str(e)}"
            )
            return False
    
    def disable_lockdown(self):
        """–í–∏–º–∫–Ω—É—Ç–∏ lockdown"""
        try:
            print(f"{Fore.YELLOW}üîì Disabling lockdown mode...{Style.RESET_ALL}")
            
            # –ó–≤—É–∫–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—é lockdown
            self.sound_system.trigger_alert(
                AlertType.SYSTEM_ERROR,
                ThreatLevel.MEDIUM,
                "Lockdown mode deactivated. External connections restored."
            )
            
            # –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ WiFi
            if "WiFi" in self.blocked_services:
                subprocess.run(["sudo", "ifconfig", "en0", "up"], check=False)
            
            # –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ Bluetooth
            if "Bluetooth" in self.blocked_services:
                subprocess.run(["sudo", "defaults", "write", "/Library/Preferences/com.apple.Bluetooth", "ControllerPowerState", "-int", "1"], check=False)
            
            self.blocked_services.clear()
            self.active = False
            print(f"{Fore.GREEN}‚úÖ Lockdown disabled{Style.RESET_ALL}")
            return True
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå Lockdown disable failed: {e}{Style.RESET_ALL}")
            self.sound_system.trigger_alert(
                AlertType.SYSTEM_ERROR,
                ThreatLevel.HIGH,
                f"Lockdown deactivation failed: {str(e)}"
            )
            return False


class InteractiveMenu:
    """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"""
    
    def __init__(self):
        self.running = True
        self.lockdown_system = LockdownSystem()
        self.secure_enclave = SecureEnclaveKey()
        
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é"""
        # –û—á–∏—Å—Ç–∏—Ç–∏ –µ–∫—Ä–∞–Ω –º–µ–Ω—é
        print("\033[2J\033[H")
        
        while self.running:
            self.show_menu()
            self.handle_input()
            time.sleep(0.1)
    
    def show_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"""
        print("\033[H")  # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤–µ—Ä—Ö—É
        print(f"{Fore.CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print("‚ïë                    NIMDA CONTROL PANEL                        ‚ïë")
        print(f"‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£{Style.RESET_ALL}")
        
        # –°—Ç–∞—Ç—É—Å lockdown
        lockdown_status = f"{Fore.RED}üîí ACTIVE" if self.lockdown_system.active else f"{Fore.GREEN}üîì INACTIVE"
        print(f"‚ïë Lockdown Status: {lockdown_status:<45} ‚ïë{Style.RESET_ALL}")
        print(f"{Fore.CYAN}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£{Style.RESET_ALL}")
        
        print(f"‚ïë {Fore.YELLOW}üîí LOCKDOWN CONTROLS{Style.RESET_ALL}                                       ‚ïë")
        print("‚ïë   L - Enable Lockdown    ‚îÇ   U - Disable Lockdown           ‚ïë")
        print("‚ïë                                                              ‚ïë")
        print(f"‚ïë {Fore.CYAN}üìä DISPLAY CONTROLS{Style.RESET_ALL}                                       ‚ïë")
        print("‚ïë   1 - Focus Network      ‚îÇ   2 - Focus Processes            ‚ïë")
        print("‚ïë   3 - Focus GPU          ‚îÇ   4 - Focus Security             ‚ïë")
        print("‚ïë   5 - Focus Logs         ‚îÇ   6 - Focus System Info          ‚ïë")
        print("‚ïë                                                              ‚ïë")
        print(f"‚ïë {Fore.MAGENTA}‚ö° QUICK ACTIONS{Style.RESET_ALL}                                         ‚ïë")
        print("‚ïë   S - System Scan        ‚îÇ   C - Clear Logs                 ‚ïë")
        print("‚ïë   R - Restart Monitors   ‚îÇ   I - System Info                ‚ïë")
        print("‚ïë                                                              ‚ïë")
        print(f"‚ïë {Fore.BLUE}üîä SOUND CONTROLS{Style.RESET_ALL}                                        ‚ïë")
        print("‚ïë   T - Test Sounds        ‚îÇ   M - Mute/Unmute Sounds         ‚ïë")
        print("‚ïë   E - Emergency Test     ‚îÇ   A - Alert Demo                 ‚ïë")
        print("‚ïë                                                              ‚ïë")
        print(f"‚ïë {Fore.RED}‚ùå EXIT{Style.RESET_ALL}                                                   ‚ïë")
        print("‚ïë   Q - Quit NIMDA         ‚îÇ   Ctrl+C - Emergency Exit        ‚ïë")
        print(f"{Fore.CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Style.RESET_ALL}")
        
        print(f"\n{Fore.YELLOW}Hotkeys: Ctrl+L = Disable Lockdown | Ctrl+C = Exit{Style.RESET_ALL}")
        print(f"Current time: {datetime.now().strftime('%H:%M:%S')}")
    
    def handle_input(self):
        """–û–±—Ä–æ–±–∏—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            # –ù–µ–±–ª–æ–∫—É—é—á–∏–π –≤–≤—ñ–¥
            import select
            import sys
            import termios
            import tty
            
            if select.select([sys.stdin], [], [], 0.1)[0]:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞ Ctrl+L (ASCII 12)
                old_settings = termios.tcgetattr(sys.stdin)
                try:
                    tty.setraw(sys.stdin.fileno())
                    ch = sys.stdin.read(1)
                    if ord(ch) == 12:  # Ctrl+L
                        self.disable_lockdown()
                        return
                finally:
                    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)
                
                command = ch.lower()
                
                if command == 'l':
                    self.enable_lockdown()
                elif command == 'u':
                    self.disable_lockdown()
                elif command in '123456':
                    self.focus_panel(int(command) - 1)
                elif command == 's':
                    self.run_system_scan()
                elif command == 'c':
                    self.clear_logs()
                elif command == 'r':
                    self.restart_monitors()
                elif command == 'i':
                    self.show_system_info()
                elif command == 't':
                    self.test_sounds()
                elif command == 'm':
                    self.toggle_sound()
                elif command == 'e':
                    self.test_emergency()
                elif command == 'a':
                    self.demo_alerts()
                elif command == 'q':
                    self.quit_nimda()
                    
        except Exception:
            pass
    
    def enable_lockdown(self):
        """–£–≤—ñ–º–∫–Ω—É—Ç–∏ lockdown"""
        if not self.secure_enclave.key_exists:
            if not self.secure_enclave.create_key():
                print(f"{Fore.RED}‚ùå Failed to create security key{Style.RESET_ALL}")
                return
        
        self.lockdown_system.enable_lockdown()
    
    def disable_lockdown(self):
        """–í–∏–º–∫–Ω—É—Ç–∏ lockdown"""
        self.lockdown_system.disable_lockdown()
    
    def focus_panel(self, panel_num):
        """–§–æ–∫—É—Å –Ω–∞ –ø–∞–Ω–µ–ª—å"""
        subprocess.run(["tmux", "select-pane", "-t", f"nimda_integrated:NIMDA.{panel_num}"], check=False)
    
    def run_system_scan(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏"""
        print(f"{Fore.CYAN}üîç Running system scan...{Style.RESET_ALL}")
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∏—Ç–∏ –ª–æ–≥–∏"""
        try:
            for log_file in ['security_monitor.log', 'nimda.log']:
                if os.path.exists(log_file):
                    open(log_file, 'w').close()
            print(f"{Fore.GREEN}‚úÖ Logs cleared{Style.RESET_ALL}")
        except Exception as e:
            print(f"{Fore.RED}‚ùå Failed to clear logs: {e}{Style.RESET_ALL}")
    
    def restart_monitors(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏"""
        print(f"{Fore.CYAN}üîÑ Restarting monitors...{Style.RESET_ALL}")
        # –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤
    
    def show_system_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É"""
        print(f"{Fore.CYAN}‚ÑπÔ∏è System Info displayed in panel 5{Style.RESET_ALL}")
        self.focus_panel(5)
    
    def quit_nimda(self):
        """–í–∏–π—Ç–∏ –∑ NIMDA"""
        self.running = False
        subprocess.run(["tmux", "kill-session", "-t", "nimda_integrated"], check=False)


class NetworkMonitor:
    """–ú–æ–Ω—ñ—Ç–æ—Ä –º–µ—Ä–µ–∂–µ–≤–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    
    def __init__(self):
        self.permission_error_shown = False
        self.last_netstat_time = 0
        self.netstat_cache = []
    
    def get_netstat_connections(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è —á–µ—Ä–µ–∑ netstat"""
        try:
            result = subprocess.run(['netstat', '-an'], capture_output=True, text=True, timeout=5)
            lines = result.stdout.split('\n')
            connections = []
            
            for line in lines:
                if 'tcp' in line.lower() or 'udp' in line.lower():
                    parts = line.split()
                    if len(parts) >= 6:
                        proto = parts[0]
                        local = parts[3]
                        remote = parts[4]
                        state = parts[5] if len(parts) > 5 else 'N/A'
                        connections.append({
                            'protocol': proto,
                            'local': local,
                            'remote': remote,
                            'state': state
                        })
            return connections
        except Exception:
            return []
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä –º–µ—Ä–µ–∂—ñ"""
        print(f"{Fore.CYAN}üåê NETWORK MONITOR{Style.RESET_ALL}")
        print("=" * 50)
        
        while True:
            try:
                current_time = time.time()
                connections = []
                use_netstat = False
                
                # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ psutil —Å–ø–æ—á–∞—Ç–∫—É
                try:
                    connections = psutil.net_connections(kind='inet')
                except (psutil.AccessDenied, PermissionError):
                    if not self.permission_error_shown:
                        print(f"{Fore.YELLOW}‚ö†Ô∏è  Permission denied for detailed connection info.{Style.RESET_ALL}")
                        print(f"{Fore.YELLOW}   Using netstat fallback...{Style.RESET_ALL}")
                        self.permission_error_shown = True
                    use_netstat = True
                
                if use_netstat:
                    # –ö–µ—à—É–≤–∞—Ç–∏ netstat —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
                    if current_time - self.last_netstat_time > 5:
                        self.netstat_cache = self.get_netstat_connections()
                        self.last_netstat_time = current_time
                    
                    print(f"\033[H{Fore.CYAN}üåê NETWORK CONNECTIONS (netstat){Style.RESET_ALL}")
                    print("=" * 60)
                    print(f"{'Protocol':<8}{'Local Address':<25}{'Remote Address':<25}{'State':<12}")
                    print("-" * 70)
                    
                    for i, conn in enumerate(self.netstat_cache[:15]):
                        if conn['state'] in ['ESTABLISHED', 'CONNECTED']:
                            color = Fore.GREEN
                        elif conn['state'] in ['LISTEN', 'TIME_WAIT']:
                            color = Fore.YELLOW
                        else:
                            color = Fore.WHITE
                        
                        print(f"{color}{conn['protocol']:<8}{conn['local']:<25}{conn['remote']:<25}{conn['state']:<12}{Style.RESET_ALL}")
                    
                    established = len([c for c in self.netstat_cache if c['state'] == 'ESTABLISHED'])
                    print(f"\n{Fore.GREEN}Established: {established}{Style.RESET_ALL} | {Fore.YELLOW}Total: {len(self.netstat_cache)}{Style.RESET_ALL}")
                
                else:
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ psutil
                    print(f"\033[H{Fore.CYAN}üåê NETWORK CONNECTIONS ({len(connections)}){Style.RESET_ALL}")
                    print("=" * 60)
                    print(f"{'PID':<8}{'Local Address':<25}{'Remote Address':<25}{'Status':<12}")
                    print("-" * 70)
                    
                    active_connections = 0
                    for conn in connections[:15]:  # –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 15
                        if conn.status == 'ESTABLISHED':
                            active_connections += 1
                            color = Fore.GREEN
                        elif conn.status in ['LISTEN', 'TIME_WAIT']:
                            color = Fore.YELLOW
                        else:
                            color = Fore.WHITE
                        
                        local = f"{conn.laddr.ip}:{conn.laddr.port}" if conn.laddr else "N/A"
                        remote = f"{conn.raddr.ip}:{conn.raddr.port}" if conn.raddr else "N/A"
                        
                        print(f"{color}{conn.pid or 'N/A':<8}{local:<25}{remote:<25}{conn.status:<12}{Style.RESET_ALL}")
                    
                    print(f"\n{Fore.GREEN}Active: {active_connections}{Style.RESET_ALL} | {Fore.YELLOW}Total: {len(connections)}{Style.RESET_ALL}")
                
                # –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ—Ä–µ–∂–µ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                net_io = psutil.net_io_counters()
                print(f"\n{Fore.BLUE}üìä Network I/O:{Style.RESET_ALL}")
                print(f"  Bytes sent: {net_io.bytes_sent:,}")
                print(f"  Bytes recv: {net_io.bytes_recv:,}")
                print(f"  Packets sent: {net_io.packets_sent:,}")
                print(f"  Packets recv: {net_io.packets_recv:,}")
                
                print(f"\n{Fore.CYAN}üïí Time: {datetime.now().strftime('%H:%M:%S')}{Style.RESET_ALL}")
                
                time.sleep(3)
                
            except KeyboardInterrupt:
                print(f"\n{Fore.YELLOW}Network monitor stopped.{Style.RESET_ALL}")
                break
            except Exception as e:
                print(f"{Fore.RED}Error: {e}{Style.RESET_ALL}")
                time.sleep(5)


class ProcessMonitor:
    """–ú–æ–Ω—ñ—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—ñ–≤"""
    
    def __init__(self):
        self.sound_system = SoundAlertSystem()
        self.suspicious_processes = {'ssh', 'sshd', 'nc', 'netcat', 'ncat', 'socat', 'telnet'}
        self.mining_processes = {'xmrig', 'ethminer', 'cgminer', 'bfgminer', 'claymore'}
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—ñ–≤"""
        print(f"{Fore.GREEN}‚öôÔ∏è PROCESS MONITOR{Style.RESET_ALL}")
        
        while True:
            try:
                processes = []
                for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
                    try:
                        processes.append(proc.info)
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        pass
                
                # –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ CPU
                processes.sort(key=lambda x: x['cpu_percent'] or 0, reverse=True)
                
                print(f"\033[H{Fore.GREEN}‚öôÔ∏è TOP PROCESSES (CPU){Style.RESET_ALL}")
                print("=" * 50)
                print(f"{'PID':<8}{'Name':<20}{'CPU%':<8}{'MEM%':<8}")
                print("-" * 44)
                
                for proc in processes[:12]:  # –¢–æ–ø 12 –ø—Ä–æ—Ü–µ—Å—ñ–≤
                    cpu_percent = proc['cpu_percent'] or 0
                    mem_percent = proc['memory_percent'] or 0
                    proc_name = proc['name'].lower()
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ –ø—Ä–æ—Ü–µ—Å–∏
                    if proc_name in self.suspicious_processes:
                        self.sound_system.trigger_alert(
                            AlertType.SUSPICIOUS_PROCESS,
                            ThreatLevel.HIGH,
                            f"Suspicious process detected: {proc['name']}"
                        )
                        color = Fore.RED
                    elif proc_name in self.mining_processes:
                        self.sound_system.trigger_alert(
                            AlertType.GPU_MINING,
                            ThreatLevel.CRITICAL,
                            f"Mining process detected: {proc['name']}"
                        )
                        color = Fore.RED
                    elif cpu_percent > 80:  # –í–∏—Å–æ–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è CPU
                        self.sound_system.trigger_alert(
                            AlertType.SYSTEM_ERROR,
                            ThreatLevel.MEDIUM,
                            f"High CPU usage: {proc['name']} ({cpu_percent:.1f}%)"
                        )
                        color = Fore.RED
                    elif cpu_percent > 50:
                        color = Fore.YELLOW
                    elif cpu_percent > 20:
                        color = Fore.YELLOW
                    else:
                        color = Fore.WHITE
                    
                    print(f"{color}{proc['pid']:<8}{proc['name'][:19]:<20}{cpu_percent:<8.1f}{mem_percent:<8.1f}{Style.RESET_ALL}")
                
                print(f"\nTime: {datetime.now().strftime('%H:%M:%S')}")
                time.sleep(3)
                
            except Exception as e:
                print(f"{Fore.RED}Error: {e}{Style.RESET_ALL}")
                time.sleep(5)


class GPUMonitor:
    """–ú–æ–Ω—ñ—Ç–æ—Ä GPU –¥–ª—è Apple Silicon"""
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä GPU"""
        print(f"{Fore.MAGENTA}üéÆ APPLE SILICON GPU MONITOR{Style.RESET_ALL}")
        
        while True:
            try:
                # –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ GPU —á–µ—Ä–µ–∑ system_profiler
                cmd = ['system_profiler', 'SPDisplaysDataType', '-json']
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
                
                print(f"\033[H{Fore.MAGENTA}üéÆ APPLE SILICON GPU{Style.RESET_ALL}")
                print("=" * 50)
                
                if result.returncode == 0:
                    try:
                        data = json.loads(result.stdout)
                        displays = data.get('SPDisplaysDataType', [])
                        
                        for display in displays:
                            vendor = display.get('spdisplays_vendor', 'Unknown')
                            if 'Apple' in vendor:
                                model = display.get('spdisplays_device-id', 'Unknown')
                                vram = display.get('spdisplays_vram', 'Unified Memory')
                                
                                print(f"Vendor: {vendor}")
                                print(f"Model: {model}")
                                print(f"VRAM: {vram}")
                                break
                    except json.JSONDecodeError:
                        print("Apple Silicon GPU detected")
                
                # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏ –∑ –≤–∏—Å–æ–∫–∏–º CPU (—è–∫ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è GPU –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)
                print(f"\n{Fore.YELLOW}HIGH CPU PROCESSES (GPU-like):{Style.RESET_ALL}")
                print("-" * 40)
                
                processes = []
                for proc in psutil.process_iter(['pid', 'name', 'cpu_percent']):
                    try:
                        info = proc.info
                        if info['cpu_percent'] and info['cpu_percent'] > 10:
                            processes.append(info)
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        pass
                
                processes.sort(key=lambda x: x['cpu_percent'], reverse=True)
                
                for proc in processes[:8]:
                    cpu = proc['cpu_percent']
                    color = Fore.RED if cpu > 50 else Fore.YELLOW if cpu > 25 else Fore.WHITE
                    print(f"{color}{proc['pid']:<8}{proc['name'][:15]:<16}{cpu:>6.1f}%{Style.RESET_ALL}")
                
                print(f"\nTime: {datetime.now().strftime('%H:%M:%S')}")
                time.sleep(4)
                
            except Exception as e:
                print(f"{Fore.RED}Error: {e}{Style.RESET_ALL}")
                time.sleep(5)


class SecurityMonitor:
    """–ú–æ–Ω—ñ—Ç–æ—Ä –ø–æ–¥—ñ–π –±–µ–∑–ø–µ–∫–∏"""
    
    def __init__(self):
        self.events = deque(maxlen=100)
        self.suspicious_ports = {22, 2222, 4444, 5555, 8080, 9999, 31337, 1337}
        self.sound_system = SoundAlertSystem()
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä –±–µ–∑–ø–µ–∫–∏"""
        print(f"{Fore.RED}üõ°Ô∏è SECURITY MONITOR{Style.RESET_ALL}")
        
        while True:
            try:
                print(f"\033[H{Fore.RED}üõ°Ô∏è SECURITY EVENTS{Style.RESET_ALL}")
                print("=" * 50)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è
                suspicious_found = 0
                connections = psutil.net_connections(kind='inet')
                
                for conn in connections:
                    if conn.laddr and conn.laddr.port in self.suspicious_ports:
                        suspicious_found += 1
                        event = {
                            'time': datetime.now().strftime('%H:%M:%S'),
                            'type': 'Suspicious Port',
                            'details': f"Port {conn.laddr.port} ({conn.status})"
                        }
                        self.events.append(event)
                        
                        # –ó–≤—É–∫–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –ø–æ—Ä—Ç—ñ–≤
                        if conn.laddr.port in {22, 2222}:  # SSH –ø–æ—Ä—Ç–∏
                            self.sound_system.trigger_alert(
                                AlertType.SSH_CONNECTION, 
                                ThreatLevel.HIGH,
                                f"SSH connection on port {conn.laddr.port}"
                            )
                        elif conn.laddr.port in {4444, 5555, 31337, 1337}:  # –•–∞–∫–µ—Ä—Å—å–∫—ñ –ø–æ—Ä—Ç–∏
                            self.sound_system.trigger_alert(
                                AlertType.NETWORK_INTRUSION,
                                ThreatLevel.CRITICAL,
                                f"Suspicious port {conn.laddr.port} active"
                            )
                        else:
                            self.sound_system.trigger_alert(
                                AlertType.PORT_SCAN,
                                ThreatLevel.MEDIUM,
                                f"Unusual port activity {conn.laddr.port}"
                            )
                
                # –ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó
                print(f"{'Time':<10}{'Type':<15}{'Details':<25}")
                print("-" * 50)
                
                if not self.events:
                    print(f"{Fore.GREEN}No security events detected{Style.RESET_ALL}")
                else:
                    for event in list(self.events)[-10:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–¥—ñ–π
                        print(f"{Fore.YELLOW}{event['time']:<10}{event['type']:<15}{event['details']:<25}{Style.RESET_ALL}")
                
                print(f"\n{Fore.RED}Suspicious ports active: {suspicious_found}{Style.RESET_ALL}")
                print(f"Time: {datetime.now().strftime('%H:%M:%S')}")
                
                time.sleep(3)
                
            except Exception as e:
                print(f"{Fore.RED}Error: {e}{Style.RESET_ALL}")
                time.sleep(5)


class LogMonitor:
    """–ú–æ–Ω—ñ—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ª–æ–≥—ñ–≤"""
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä –ª–æ–≥—ñ–≤"""
        print(f"{Fore.BLUE}üìã LOG MONITOR{Style.RESET_ALL}")
        
        while True:
            try:
                print(f"\033[H{Fore.BLUE}üìã SYSTEM LOGS{Style.RESET_ALL}")
                print("=" * 50)
                
                # –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ —Å–∏—Å—Ç–µ–º–Ω—ñ –ª–æ–≥–∏
                try:
                    cmd = ['log', 'show', '--last', '1m', '--predicate', 'category == "security"', '--style', 'compact']
                    result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
                    
                    if result.stdout:
                        lines = result.stdout.strip().split('\n')[-10:]  # –û—Å—Ç–∞–Ω–Ω—ñ 10 —Ä—è–¥–∫—ñ–≤
                        for line in lines:
                            if 'error' in line.lower() or 'fail' in line.lower():
                                print(f"{Fore.RED}{line[:70]}{Style.RESET_ALL}")
                            elif 'warn' in line.lower():
                                print(f"{Fore.YELLOW}{line[:70]}{Style.RESET_ALL}")
                            else:
                                print(f"{Fore.WHITE}{line[:70]}{Style.RESET_ALL}")
                    else:
                        print(f"{Fore.GREEN}No recent security logs{Style.RESET_ALL}")
                        
                except subprocess.TimeoutExpired:
                    # Fallback - –ø–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ NIMDA
                    if os.path.exists('security_monitor.log'):
                        with open('security_monitor.log', 'r') as f:
                            lines = f.readlines()[-10:]
                            for line in lines:
                                print(f"{Fore.WHITE}{line.strip()[:70]}{Style.RESET_ALL}")
                    else:
                        print(f"{Fore.GREEN}No logs available{Style.RESET_ALL}")
                
                print(f"\nTime: {datetime.now().strftime('%H:%M:%S')}")
                time.sleep(5)
                
            except Exception as e:
                print(f"{Fore.RED}Error: {e}{Style.RESET_ALL}")
                time.sleep(5)


class SystemMonitor:
    """–ú–æ–Ω—ñ—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"""
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä"""
        print(f"{Fore.WHITE}üíª SYSTEM MONITOR{Style.RESET_ALL}")
        
        while True:
            try:
                print(f"\033[H{Fore.WHITE}üíª SYSTEM INFORMATION{Style.RESET_ALL}")
                print("=" * 50)
                
                # CPU —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                cpu_percent = psutil.cpu_percent(interval=1)
                cpu_count = psutil.cpu_count()
                
                # –ü–∞–º—è—Ç—å
                memory = psutil.virtual_memory()
                
                # –î–∏—Å–∫
                disk = psutil.disk_usage('/')
                
                # –ú–µ—Ä–µ–∂–∞
                net_io = psutil.net_io_counters()
                
                print(f"{'CPU Usage:':<15} {cpu_percent:>6.1f}% ({cpu_count} cores)")
                print(f"{'Memory:':<15} {memory.percent:>6.1f}% ({memory.used//1024//1024//1024}GB/{memory.total//1024//1024//1024}GB)")
                print(f"{'Disk Usage:':<15} {disk.percent:>6.1f}% ({disk.used//1024//1024//1024}GB/{disk.total//1024//1024//1024}GB)")
                
                print(f"\n{Fore.CYAN}Network I/O:{Style.RESET_ALL}")
                print(f"{'Bytes Sent:':<15} {net_io.bytes_sent//1024//1024:>6}MB")
                print(f"{'Bytes Recv:':<15} {net_io.bytes_recv//1024//1024:>6}MB")
                
                # –°–∏—Å—Ç–µ–º–∞
                boot_time = datetime.fromtimestamp(psutil.boot_time())
                uptime = datetime.now() - boot_time
                
                print(f"\n{Fore.GREEN}System:{Style.RESET_ALL}")
                print(f"{'Boot Time:':<15} {boot_time.strftime('%Y-%m-%d %H:%M')}")
                print(f"{'Uptime:':<15} {str(uptime).split('.')[0]}")
                print(f"{'Load Avg:':<15} {os.getloadavg()[0]:.2f}")
                
                print(f"\nTime: {datetime.now().strftime('%H:%M:%S')}")
                time.sleep(4)
                
            except Exception as e:
                print(f"{Fore.RED}Error: {e}{Style.RESET_ALL}")
                time.sleep(5)


class ThreatLevel(Enum):
    """–†—ñ–≤–Ω—ñ –∑–∞–≥—Ä–æ–∑"""
    LOW = 1
    MEDIUM = 2
    HIGH = 3
    CRITICAL = 4
    EMERGENCY = 5

class AlertType(Enum):
    """–¢–∏–ø–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    NETWORK_INTRUSION = "network_intrusion"
    SUSPICIOUS_PROCESS = "suspicious_process"
    GPU_MINING = "gpu_mining"
    LOCKDOWN_BREACH = "lockdown_breach"
    SYSTEM_ERROR = "system_error"
    PERIPHERAL_DETECTED = "peripheral_detected"
    SSH_CONNECTION = "ssh_connection"
    PORT_SCAN = "port_scan"

class SoundAlertSystem:
    """–°–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    
    def __init__(self):
        self.alert_active = False
        self.sound_enabled = True
        self.last_alert_time = {}
        self.alert_intervals = {
            ThreatLevel.LOW: 30,      # 30 —Å–µ–∫—É–Ω–¥
            ThreatLevel.MEDIUM: 15,   # 15 —Å–µ–∫—É–Ω–¥
            ThreatLevel.HIGH: 5,      # 5 —Å–µ–∫—É–Ω–¥
            ThreatLevel.CRITICAL: 2,  # 2 —Å–µ–∫—É–Ω–¥–∏
            ThreatLevel.EMERGENCY: 1  # 1 —Å–µ–∫—É–Ω–¥–∞ (—Å–∏—Ä–µ–Ω–∞)
        }
        
        # –°–∏—Å—Ç–µ–º–Ω—ñ –∑–≤—É–∫–∏ macOS
        self.system_sounds = {
            ThreatLevel.LOW: "Tink",
            ThreatLevel.MEDIUM: "Pop",
            ThreatLevel.HIGH: "Sosumi",
            ThreatLevel.CRITICAL: "Basso",
            ThreatLevel.EMERGENCY: "Funk"
        }
        
        self.emergency_active = False
        self.emergency_thread = None
        
    def play_system_sound(self, sound_name):
        """–í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω–∏–π –∑–≤—É–∫ macOS"""
        try:
            subprocess.run(['afplay', f'/System/Library/Sounds/{sound_name}.aiff'], 
                         check=False, capture_output=True)
        except Exception:
            subprocess.run(['say', 'Alert'], check=False, capture_output=True)
    
    def generate_beep_sequence(self, threat_level):
        """–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –∑–≤—É–∫–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤"""
        beep_patterns = {
            ThreatLevel.LOW: [1],           
            ThreatLevel.MEDIUM: [1, 1],     
            ThreatLevel.HIGH: [1, 1, 1],    
            ThreatLevel.CRITICAL: [2, 1, 2], 
            ThreatLevel.EMERGENCY: [3, 3, 3] 
        }
        
        pattern = beep_patterns.get(threat_level, [1])
        
        for duration in pattern:
            if duration == 1:
                subprocess.run(['osascript', '-e', 'beep 1'], check=False)
            elif duration == 2:
                subprocess.run(['osascript', '-e', 'beep 2'], check=False)
            else:
                subprocess.run(['osascript', '-e', 'beep 3'], check=False)
            time.sleep(0.2)
    
    def play_voice_alert(self, message, threat_level):
        """–í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
        try:
            voice_settings = {
                ThreatLevel.LOW: "Alex",
                ThreatLevel.MEDIUM: "Victoria", 
                ThreatLevel.HIGH: "Daniel",
                ThreatLevel.CRITICAL: "Fiona",
                ThreatLevel.EMERGENCY: "Alex"
            }
            
            rate_settings = {
                ThreatLevel.LOW: "200",
                ThreatLevel.MEDIUM: "220",
                ThreatLevel.HIGH: "250", 
                ThreatLevel.CRITICAL: "280",
                ThreatLevel.EMERGENCY: "300"
            }
            
            voice = voice_settings.get(threat_level, "Alex")
            rate = rate_settings.get(threat_level, "200")
            
            subprocess.run(['say', '-v', voice, '-r', rate, message], check=False)
            
        except Exception:
            subprocess.run(['osascript', '-e', 'beep'], check=False)
    
    def emergency_siren(self):
        """–ê–≤–∞—Ä—ñ–π–Ω–∞ —Å–∏—Ä–µ–Ω–∞ –¥–ª—è –Ω–∞–π–≤–∏—â–æ–≥–æ —Ä—ñ–≤–Ω—è –∑–∞–≥—Ä–æ–∑–∏"""
        siren_messages = [
            "EMERGENCY! SECURITY BREACH DETECTED!",
            "–°–ò–°–¢–ï–ú–ê –ü–Ü–î –ê–¢–ê–ö–û–Æ!",
            "CRITICAL THREAT LEVEL!",
            "–ù–ï–í–Ü–î–ö–õ–ê–î–ù–Ü –ó–ê–•–û–î–ò –ë–ï–ó–ü–ï–ö–ò!"
        ]
        
        while self.emergency_active:
            for freq in [800, 1000, 800, 1000, 800]:
                if not self.emergency_active:
                    break
                subprocess.run(['osascript', '-e', f'beep {freq//200}'], check=False)
                time.sleep(0.1)
            
            if self.emergency_active:
                message = siren_messages[int(time.time()) % len(siren_messages)]
                self.play_voice_alert(message, ThreatLevel.EMERGENCY)
            
            time.sleep(2)
    
    def start_emergency_siren(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤–∞—Ä—ñ–π–Ω—É —Å–∏—Ä–µ–Ω—É"""
        if not self.emergency_active:
            self.emergency_active = True
            self.emergency_thread = threading.Thread(target=self.emergency_siren, daemon=True)
            self.emergency_thread.start()
            print(f"{Fore.RED}üö® EMERGENCY SIREN ACTIVATED{Style.RESET_ALL}")
    
    def stop_emergency_siren(self):
        """–ó—É–ø–∏–Ω–∏—Ç–∏ –∞–≤–∞—Ä—ñ–π–Ω—É —Å–∏—Ä–µ–Ω—É"""
        if self.emergency_active:
            self.emergency_active = False
            if self.emergency_thread:
                self.emergency_thread.join(timeout=1)
            print(f"{Fore.YELLOW}üîá Emergency siren stopped{Style.RESET_ALL}")
    
    def can_play_alert(self, alert_type, threat_level):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º–æ–∂–Ω–∞ –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
        if not self.sound_enabled:
            return False
        
        current_time = time.time()
        key = f"{alert_type}_{threat_level}"
        
        if key in self.last_alert_time:
            interval = self.alert_intervals[threat_level]
            if current_time - self.last_alert_time[key] < interval:
                return False
        
        self.last_alert_time[key] = current_time
        return True
    
    def trigger_alert(self, alert_type, threat_level, message="Security Alert", details=""):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∑–≤—É–∫–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
        if not self.can_play_alert(alert_type, threat_level):
            return
        
        print(f"{Fore.YELLOW}üîä Sound Alert: {alert_type.value} - {threat_level.name}{Style.RESET_ALL}")
        
        if threat_level == ThreatLevel.EMERGENCY:
            self.start_emergency_siren()
            return
        
        def play_alert():
            try:
                sound_name = self.system_sounds[threat_level]
                self.play_system_sound(sound_name)
                time.sleep(0.3)
                
                self.generate_beep_sequence(threat_level)
                time.sleep(0.5)
                
                if threat_level in [ThreatLevel.HIGH, ThreatLevel.CRITICAL]:
                    alert_messages = {
                        AlertType.NETWORK_INTRUSION: "Network intrusion detected",
                        AlertType.SUSPICIOUS_PROCESS: "Suspicious process detected", 
                        AlertType.GPU_MINING: "Possible mining activity detected",
                        AlertType.LOCKDOWN_BREACH: "Lockdown system breach",
                        AlertType.SYSTEM_ERROR: "Critical system error",
                        AlertType.PERIPHERAL_DETECTED: "Unauthorized peripheral detected",
                        AlertType.SSH_CONNECTION: "Suspicious SSH connection",
                        AlertType.PORT_SCAN: "Port scanning detected"
                    }
                    
                    voice_message = alert_messages.get(alert_type, message)
                    if details:
                        voice_message += f". {details}"
                    
                    self.play_voice_alert(voice_message, threat_level)
                
            except Exception as e:
                print(f"{Fore.RED}Sound alert error: {e}{Style.RESET_ALL}")
        
        alert_thread = threading.Thread(target=play_alert, daemon=True)
        alert_thread.start()
    
    def enable_sound(self):
        """–£–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–≤—É–∫"""
        self.sound_enabled = True
        print(f"{Fore.GREEN}üîä Sound alerts enabled{Style.RESET_ALL}")
    
    def disable_sound(self):
        """–í–∏–º–∫–Ω—É—Ç–∏ –∑–≤—É–∫"""
        self.sound_enabled = False
        self.stop_emergency_siren()
        print(f"{Fore.YELLOW}üîá Sound alerts disabled{Style.RESET_ALL}")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    if len(sys.argv) == 1:
        # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        nimda = NIMDAIntegrated()
        nimda.run()
    else:
        # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–∫—Ä–µ–º–∏–π –º–æ–Ω—ñ—Ç–æ—Ä (–¥–ª—è TMUX –ø–∞–Ω–µ–ª–µ–π)
        monitor_type = sys.argv[1]
        
        if monitor_type == "network":
            NetworkMonitor().run()
        elif monitor_type == "process":
            ProcessMonitor().run()
        elif monitor_type == "gpu":
            GPUMonitor().run()
        elif monitor_type == "security":
            SecurityMonitor().run()
        elif monitor_type == "logs":
            LogMonitor().run()
        elif monitor_type == "system":
            SystemMonitor().run()
        elif monitor_type == "menu":
            InteractiveMenu().run()
        else:
            print(f"Unknown monitor type: {monitor_type}")


if __name__ == "__main__":
    main()
