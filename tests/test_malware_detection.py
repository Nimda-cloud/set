#!/usr/bin/env python3
"""
Test script for malware detection functionality
"""

import os
import sys
import time
import json
from datetime import datetime

# Add current directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from malware_detection import MalwareDetector
    print("✅ Malware detection module imported successfully")
except ImportError as e:
    print(f"❌ Failed to import malware detection module: {e}")
    sys.exit(1)

def test_malware_detection():
    """Test malware detection functionality"""
    print("\n🧪 Testing Malware Detection System")
    print("=" * 50)
    
    # Initialize detector
    detector = MalwareDetector()
    print("✅ MalwareDetector initialized")
    
    # Test target
    test_target = "/tmp/test_malware_file"
    
    # Create test file
    try:
        with open(test_target, 'w') as f:
            f.write("This is a test file for malware detection")
        print(f"✅ Created test file: {test_target}")
    except Exception as e:
        print(f"❌ Failed to create test file: {e}")
        return
    
    # Test 1: Detect trojan
    print("\n🔍 Test 1: Trojan Detection")
    try:
        detection_result = detector.detect_trojan(test_target, {})
        print(f"Detection result: {detection_result['risk_level']}")
        print(f"Suspicious processes: {len(detection_result['suspicious_processes'])}")
        print(f"Suspicious files: {len(detection_result['suspicious_files'])}")
        print(f"Trojan indicators: {len(detection_result['trojan_indicators'])}")
        print("✅ Trojan detection test completed")
    except Exception as e:
        print(f"❌ Trojan detection test failed: {e}")
    
    # Test 2: File isolation
    print("\n🔒 Test 2: File Isolation")
    try:
        isolation_result = detector.isolate_file(test_target, {})
        if isolation_result['success']:
            print(f"✅ File isolated successfully: {isolation_result['quarantine_path']}")
        else:
            print(f"❌ File isolation failed: {isolation_result['error']}")
    except Exception as e:
        print(f"❌ File isolation test failed: {e}")
    
    # Test 3: Deep analysis
    print("\n🔬 Test 3: Deep Analysis")
    try:
        analysis_result = detector.deep_analysis(test_target, {})
        if analysis_result['success']:
            print("✅ Deep analysis completed successfully")
            print(f"File analysis: {len(analysis_result['file_analysis'])} items")
        else:
            print(f"❌ Deep analysis failed: {analysis_result['error']}")
    except Exception as e:
        print(f"❌ Deep analysis test failed: {e}")
    
    # Test 4: Ecosystem analysis
    print("\n🌐 Test 4: Ecosystem Analysis")
    try:
        ecosystem_result = detector.analyze_ecosystem(test_target, {})
        if ecosystem_result['success']:
            print(f"✅ Ecosystem analysis completed: {ecosystem_result['risk_level']}")
            print(f"Files: {len(ecosystem_result['files'])}")
            print(f"Processes: {len(ecosystem_result['processes'])}")
            print(f"Connections: {len(ecosystem_result['connections'])}")
        else:
            print(f"❌ Ecosystem analysis failed: {ecosystem_result['error']}")
    except Exception as e:
        print(f"❌ Ecosystem analysis test failed: {e}")
    
    # Test 5: Quarantine
    print("\n🚫 Test 5: Quarantine")
    try:
        quarantine_result = detector.quarantine_target(test_target, {})
        if quarantine_result['success']:
            print("✅ Quarantine completed successfully")
            print(f"Terminated processes: {len(quarantine_result['terminated_processes'])}")
            print(f"Isolated files: {len(quarantine_result['isolated_files'])}")
        else:
            print(f"❌ Quarantine failed: {quarantine_result['error']}")
    except Exception as e:
        print(f"❌ Quarantine test failed: {e}")
    
    # Test 6: Malware removal
    print("\n🧹 Test 6: Malware Removal")
    try:
        removal_result = detector.remove_malware(test_target, {})
        if removal_result['success']:
            print("✅ Malware removal completed successfully")
            print(f"Removed files: {len(removal_result['removed_files'])}")
            print(f"Killed processes: {len(removal_result['killed_processes'])}")
        else:
            print(f"❌ Malware removal failed: {removal_result['error']}")
    except Exception as e:
        print(f"❌ Malware removal test failed: {e}")
    
    # Cleanup
    try:
        if os.path.exists(test_target):
            os.remove(test_target)
            print(f"✅ Cleaned up test file: {test_target}")
    except Exception as e:
        print(f"⚠️ Failed to cleanup test file: {e}")
    
    print("\n🎉 All malware detection tests completed!")

def test_integration_with_main_system():
    """Test integration with main NIMDA system"""
    print("\n🔗 Testing Integration with Main System")
    print("=" * 50)
    
    try:
        from nimda_tkinter import ThreatAnalyzer, SecurityPolicy, SecurityAction, ThreatLevel
        
        # Create security policy
        policy = SecurityPolicy()
        print("✅ Security policy created")
        
        # Create threat analyzer
        analyzer = ThreatAnalyzer(policy)
        print("✅ Threat analyzer created")
        
        # Test threat level analysis
        threat_level = analyzer.analyze_port_threat(4444, "suspicious")
        print(f"✅ Port threat analysis: {threat_level.value}")
        
        # Test action execution
        test_target = "test_malware_target"
        test_details = {"port": 4444, "service": "suspicious"}
        
        print(f"Executing actions for threat level: {threat_level.value}")
        analyzer.execute_actions(threat_level, test_target, test_details)
        print("✅ Action execution test completed")
        
    except ImportError as e:
        print(f"❌ Failed to import main system: {e}")
    except Exception as e:
        print(f"❌ Integration test failed: {e}")

if __name__ == "__main__":
    print("🚀 Starting Malware Detection Tests")
    print("=" * 50)
    
    # Test standalone functionality
    test_malware_detection()
    
    # Test integration
    test_integration_with_main_system()
    
    print("\n✨ All tests completed!") 