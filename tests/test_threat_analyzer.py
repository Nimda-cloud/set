#!/usr/bin/env python3
"""
Simple Threat Level Analyzer Test
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä–æ–∑ –±–µ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
"""

import time
from datetime import datetime
from enum import Enum

class ThreatLevel(Enum):
    """–†—ñ–≤–Ω—ñ –∑–∞–≥—Ä–æ–∑"""
    LOW = 1
    MEDIUM = 2
    HIGH = 3
    CRITICAL = 4
    EMERGENCY = 5

class SimpleThreatAnalyzer:
    """–ü—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –∑–∞–≥—Ä–æ–∑ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    
    def __init__(self):
        self.threat_history = []
        
    def analyze_threat_levels(self, target: str, context: dict = None) -> ThreatLevel:
        """–ê–Ω–∞–ª—ñ–∑—É—î —Ä—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑"""
        print(f"üîç –ê–Ω–∞–ª—ñ–∑ –∑–∞–≥—Ä–æ–∑ –¥–ª—è: {target}")
        
        # –ü—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        score = 0
        
        if context:
            if context.get('external_ip'):
                score += 30
                print("  ‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π IP")
            if context.get('known_malware_signature'):
                score += 50
                print("  ü¶† –í–∏—è–≤–ª–µ–Ω–æ –ø—ñ–¥–ø–∏—Å –º–∞–ª–≤–∞—Ä–µ")
            if context.get('privilege_escalation'):
                score += 40
                print("  üîì –°–ø—Ä–æ–±–∞ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ–ª–µ—ó–≤")
            if context.get('suspicious_port'):
                score += 20
                print("  üîå –ü—ñ–¥–æ–∑—Ä—ñ–ª–∏–π –ø–æ—Ä—Ç")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å
        if score >= 80:
            threat_level = ThreatLevel.EMERGENCY
        elif score >= 60:
            threat_level = ThreatLevel.CRITICAL
        elif score >= 40:
            threat_level = ThreatLevel.HIGH
        elif score >= 20:
            threat_level = ThreatLevel.MEDIUM
        else:
            threat_level = ThreatLevel.LOW
            
        # –ó–∞–ø–∏—Å—É—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        self.threat_history.append({
            'timestamp': datetime.now(),
            'target': target,
            'threat_level': threat_level,
            'score': score
        })
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        self._execute_response(threat_level, target)
        
        return threat_level
    
    def _execute_response(self, threat_level: ThreatLevel, target: str):
        """–í–∏–∫–æ–Ω—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–≥—Ä–æ–∑—É"""
        responses = {
            ThreatLevel.LOW: ("üü¢", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"),
            ThreatLevel.MEDIUM: ("üü°", "–ü–æ—Å–∏–ª–µ–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"),
            ThreatLevel.HIGH: ("üü†", "–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞—Ö–æ–¥–∏ –∑–∞—Ö–∏—Å—Ç—É"),
            ThreatLevel.CRITICAL: ("üî¥", "–ö—Ä–∏—Ç–∏—á–Ω—ñ –∑–∞—Ö–æ–¥–∏ –±–µ–∑–ø–µ–∫–∏"),
            ThreatLevel.EMERGENCY: ("‚ö´", "–ù–ê–î–ó–í–ò–ß–ê–ô–ù–ê –°–ò–¢–£–ê–¶–Ü–Ø")
        }
        
        emoji, description = responses[threat_level]
        print(f"{emoji} {threat_level.name}: {description}")
        
        # –°–∏–º—É–ª—è—Ü—ñ—è –¥—ñ–π
        if threat_level.value >= 3:
            print("  üö® –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –¥—ñ–π...")
            time.sleep(1)
    
    def get_history_summary(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø—ñ–¥—Å—É–º–æ–∫ —ñ—Å—Ç–æ—Ä—ñ—ó"""
        if not self.threat_history:
            return "–ê–Ω–∞–ª—ñ–∑ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–≤—Å—è"
        
        levels = [entry['threat_level'] for entry in self.threat_history]
        return {
            'total_analyses': len(self.threat_history),
            'latest_threat': levels[-1].name,
            'max_threat': max(levels, key=lambda x: x.value).name,
            'threats_by_level': {level.name: levels.count(level) for level in ThreatLevel}
        }

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞"""
    print("üöÄ NIMDA Simple Threat Level Analyzer")
    print("=" * 50)
    
    analyzer = SimpleThreatAnalyzer()
    
    # –¢–µ—Å—Ç–æ–≤—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó
    test_scenarios = [
        {
            "target": "Port 22 (SSH)",
            "context": {"external_ip": True, "suspicious_port": True}
        },
        {
            "target": "bitcoin-miner.exe",
            "context": {"known_malware_signature": True, "privilege_escalation": True}
        },
        {
            "target": "Port 4444 (Metasploit)",
            "context": {"external_ip": True, "suspicious_port": True, "known_malware_signature": True}
        },
        {
            "target": "Chrome Browser",
            "context": {}
        },
        {
            "target": "sudo attempt",
            "context": {"privilege_escalation": True}
        }
    ]
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
    for i, scenario in enumerate(test_scenarios, 1):
        print(f"\nüìç –¢–µ—Å—Ç–æ–≤–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π {i}:")
        threat_level = analyzer.analyze_threat_levels(
            scenario["target"],
            scenario["context"]
        )
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {threat_level.name} (—Ä—ñ–≤–µ–Ω—å {threat_level.value})")
        time.sleep(1.5)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
    print("\nüìä –ü—ñ–¥—Å—É–º–æ–∫ –∞–Ω–∞–ª—ñ–∑—É:")
    summary = analyzer.get_history_summary()
    for key, value in summary.items():
        if isinstance(value, dict):
            print(f"  {key}:")
            for k, v in value.items():
                print(f"    {k}: {v}")
        else:
            print(f"  {key}: {value}")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
