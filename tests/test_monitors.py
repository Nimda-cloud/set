#!/usr/bin/env python3
"""
NIMDA Monitor Test - –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤
"""

import sys
import time
import signal
import os
import subprocess

# –î–æ–¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ —à–ª—è—Ö—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from nimda_integrated import (
    NetworkMonitor, ProcessMonitor, GPUMonitor,
    SecurityMonitor, LogMonitor, SystemMonitor,
    Fore, Style
)

class MonitorTester:
    def __init__(self):
        self.running = True
        signal.signal(signal.SIGINT, self.signal_handler)
    
    def signal_handler(self, signum, frame):
        print(f"\n{Fore.YELLOW}üõë –ó—É–ø–∏–Ω–µ–Ω–Ω—è —Ç–µ—Å—Ç—É –º–æ–Ω—ñ—Ç–æ—Ä–∞...{Style.RESET_ALL}")
        self.running = False
    
    def test_monitor(self, monitor_class, name, duration=30):
        """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä –ø—Ä–æ—Ç—è–≥–æ–º –≤–∫–∞–∑–∞–Ω–æ–≥–æ —á–∞—Å—É"""
        print(f"{Fore.CYAN}üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è {name} –ø—Ä–æ—Ç—è–≥–æ–º {duration} —Å–µ–∫—É–Ω–¥...{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è —Ä–∞–Ω–Ω—å–æ–≥–æ –∑—É–ø–∏–Ω–µ–Ω–Ω—è{Style.RESET_ALL}\n")
        
        monitor = monitor_class()
        
        # Patch run method to add timeout
        original_run = monitor.run
        
        def timed_run():
            start_time = time.time()
            count = 0
            while self.running and (time.time() - start_time) < duration:
                try:
                    # Run one iteration of the monitor
                    if hasattr(monitor, 'run_once'):
                        monitor.run_once()
                    else:
                        # Simulate monitor iteration
                        print(f"\033[H{Fore.CYAN}üìä {name} - –Ü—Ç–µ—Ä–∞—Ü—ñ—è {count + 1}{Style.RESET_ALL}")
                        if name == "NetworkMonitor":
                            self.test_network_iteration()
                        elif name == "ProcessMonitor":
                            self.test_process_iteration()
                        elif name == "GPUMonitor":
                            self.test_gpu_iteration()
                        elif name == "SecurityMonitor":
                            self.test_security_iteration()
                        elif name == "LogMonitor":
                            self.test_log_iteration()
                        elif name == "SystemMonitor":
                            self.test_system_iteration()
                    
                    count += 1
                    time.sleep(2)
                    
                except KeyboardInterrupt:
                    raise
                except Exception as e:
                    print(f"{Fore.RED}‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ {name}: {e}{Style.RESET_ALL}")
                    time.sleep(5)
            
            print(f"\n{Fore.GREEN}‚úÖ –¢–µ—Å—Ç {name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({count} —ñ—Ç–µ—Ä–∞—Ü—ñ–π){Style.RESET_ALL}")
        
        try:
            timed_run()
        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}üõë –¢–µ—Å—Ç {name} –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ{Style.RESET_ALL}")
    
    def test_network_iteration(self):
        """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä –º–µ—Ä–µ–∂—ñ"""
        try:
            connections = psutil.net_connections(kind='inet')
            active = len([c for c in connections if c.status == 'ESTABLISHED'])
            print(f"–ê–∫—Ç–∏–≤–Ω—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è: {active}, –í—Å—å–æ–≥–æ: {len(connections)}")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∞: {e}")
    
    def test_process_iteration(self):
        """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—ñ–≤"""
        try:
            processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent']):
                try:
                    info = proc.info
                    if info['cpu_percent'] and info['cpu_percent'] > 5:
                        processes.append(info)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    pass
            
            processes.sort(key=lambda x: x['cpu_percent'], reverse=True)
            
            for proc in processes[:5]:
                print(f"PID {proc['pid']}: {proc['name']} - {proc['cpu_percent']:.1f}%")
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—ñ–≤: {e}")
    
    def test_gpu_iteration(self):
        """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä GPU"""
        print("Apple Silicon GPU - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—ñ–≤ –∑ –≤–∏—Å–æ–∫–∏–º CPU...")
        try:
            high_cpu = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent']):
                try:
                    info = proc.info
                    if info['cpu_percent'] and info['cpu_percent'] > 10:
                        high_cpu.append(info)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    pass
            
            print(f"–ü—Ä–æ—Ü–µ—Å–∏ –∑ –≤–∏—Å–æ–∫–∏–º CPU: {len(high_cpu)}")
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∞ GPU: {e}")
    
    def test_security_iteration(self):
        """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä –±–µ–∑–ø–µ–∫–∏"""
        try:
            suspicious_ports = {22, 2222, 4444, 5555, 8080, 9999, 31337, 1337}
            connections = psutil.net_connections(kind='inet')
            suspicious = [c for c in connections if c.laddr and c.laddr.port in suspicious_ports]
            print(f"–ü—ñ–¥–æ–∑—Ä—ñ–ª—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è: {len(suspicious)}")
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∞ –±–µ–∑–ø–µ–∫–∏: {e}")
    
    def test_log_iteration(self):
        """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä –ª–æ–≥—ñ–≤"""
        try:
            print("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ª–æ–≥—ñ–≤...")
            cmd = ['log', 'show', '--last', '1m', '--predicate', 'category == "security"', '--style', 'compact']
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=5)
            
            if result.stdout:
                lines = result.stdout.strip().split('\n')
                print(f"–ó–∞–ø–∏—Å–∏ –ª–æ–≥—ñ–≤: {len(lines)}")
            else:
                print("–§–∞–π–ª –ª–æ–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∞ –ª–æ–≥—ñ–≤: {e}")
    
    def test_system_iteration(self):
        """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä"""
        try:
            cpu = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            print(f"CPU: {cpu:.1f}%, –ü–∞–º'—è—Ç—å: {memory.percent:.1f}%")
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∞: {e}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print(f"{Fore.CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë                    –¢–ï–°–¢–ï–† –ú–û–ù–Ü–¢–û–†–Ü–í NIMDA                       ‚ïë")
    print("‚ïë                    –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤                ‚ïë")
    print(f"‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Style.RESET_ALL}")
    
    monitors = {
        "1": ("–ú–æ–Ω—ñ—Ç–æ—Ä –º–µ—Ä–µ–∂—ñ", NetworkMonitor),
        "2": ("–ú–æ–Ω—ñ—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—ñ–≤", ProcessMonitor),
        "3": ("–ú–æ–Ω—ñ—Ç–æ—Ä GPU", GPUMonitor),
        "4": ("–ú–æ–Ω—ñ—Ç–æ—Ä –±–µ–∑–ø–µ–∫–∏", SecurityMonitor),
        "5": ("–ú–æ–Ω—ñ—Ç–æ—Ä –ª–æ–≥—ñ–≤", LogMonitor),
        "6": ("–°–∏—Å—Ç–µ–º–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä", SystemMonitor)
    }
    
    print("\n–î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏:")
    for key, (name, _) in monitors.items():
        print(f"  {key}. {name}")
    
    print("  0. –í–∏—Ö—ñ–¥")
    
    tester = MonitorTester()
    
    while True:
        try:
            choice = input(f"\n{Fore.YELLOW}–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–Ω—ñ—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (0-6): {Style.RESET_ALL}").strip()
            
            if choice == "0":
                print(f"{Fore.GREEN}üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!{Style.RESET_ALL}")
                break
            
            if choice in monitors:
                name, monitor_class = monitors[choice]
                duration = int(input(f"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ç–µ—Å—Ç—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 30): ") or "30")
                tester.test_monitor(monitor_class, name, duration)
            else:
                print(f"{Fore.RED}‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä{Style.RESET_ALL}")
                
        except KeyboardInterrupt:
            print(f"\n{Fore.GREEN}üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!{Style.RESET_ALL}")
            break
        except Exception as e:
            print(f"{Fore.RED}‚ùå –ü–æ–º–∏–ª–∫–∞: {e}{Style.RESET_ALL}")

if __name__ == "__main__":
    main()
