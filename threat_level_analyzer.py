#!/usr/bin/env python3
"""
Threat Level Analyzer for NIMDA Security System
–ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä —Ä—ñ–≤–Ω—ñ–≤ –∑–∞–≥—Ä–æ–∑ –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –∑–≤—É–∫–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
"""

import sys
import time
import logging
from datetime import datetime
from typing import Dict, List

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("nimda_threat_analyzer.log"),
        logging.StreamHandler()
    ]
)

# –Ü–º–ø–æ—Ä—Ç –∑ –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤ NIMDA
try:
    from nimda_integrated import ThreatLevel, SecurityMonitor
    from sound_alerts_enhanced import SoundAlertSystem
except ImportError as e:
    logging.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    print("–ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –∑ –æ—Å–Ω–æ–≤–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó NIMDA")
    sys.exit(1)

class ThreatLevelAnalyzer:
    """–ö–ª–∞—Å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ä—ñ–≤–Ω—ñ–≤ –∑–∞–≥—Ä–æ–∑ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º–∏ –¥—ñ—è–º–∏."""

    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.sound_alerts = SoundAlertSystem()
        self.security_monitor = SecurityMonitor()
        self.threat_history = []
        self.last_analysis_time = None
        self.logger.info("ThreatLevelAnalyzer —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
    def analyze_threat_levels(self, target: str = None, context: Dict = None) -> ThreatLevel:
        """
        –ê–Ω–∞–ª—ñ–∑—É—î —Ä—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏
        
        Args:
            target: –¶—ñ–ª—å –∞–Ω–∞–ª—ñ–∑—É (–ø–æ—Ä—Ç, –ø—Ä–æ—Ü–µ—Å, –ø—Ä–∏—Å—Ç—Ä—ñ–π)
            context: –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            
        Returns:
            ThreatLevel: –í–∏–∑–Ω–∞—á–µ–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑–∏
        """
        self.logger.info(f"–ü–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É –∑–∞–≥—Ä–æ–∑ –¥–ª—è: {target or '—Å–∏—Å—Ç–µ–º–∏'}")
        print(f"üîç –ê–Ω–∞–ª—ñ–∑ –∑–∞–≥—Ä–æ–∑ –¥–ª—è: {target or '—Å–∏—Å—Ç–µ–º–∏'}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Å–∏—Å—Ç–µ–º–∏
        current_threats = self._collect_threat_indicators()
        self.logger.debug(f"–ó—ñ–±—Ä–∞–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –∑–∞–≥—Ä–æ–∑: {current_threats}")
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑
        threat_level = self._calculate_threat_level(current_threats, context)
        self.logger.info(f"–í–∏–∑–Ω–∞—á–µ–Ω–æ —Ä—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑–∏: {threat_level.name}")
        
        # –ó–∞–ø–∏—Å—É—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        self.threat_history.append({
            'timestamp': datetime.now(),
            'target': target,
            'threat_level': threat_level,
            'indicators': current_threats
        })
        
        self.last_analysis_time = datetime.now()
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –¥—ñ—ó
        self._execute_threat_response(threat_level, target, context)
        self.logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∞–Ω–∞–ª—ñ–∑ –∑–∞–≥—Ä–æ–∑ –¥–ª—è: {target or '—Å–∏—Å—Ç–µ–º–∏'}")
        
        return threat_level

    def _collect_threat_indicators(self) -> Dict:
        """–ó–±–∏—Ä–∞—î –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∑–∞–≥—Ä–æ–∑ –∑ —Å–∏—Å—Ç–µ–º–∏"""
        indicators = {
            'suspicious_processes': [],
            'open_ports': [],
            'network_connections': 0,
            'cpu_usage': 0,
            'memory_usage': 0,
            'disk_activity': 0
        }
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –≤—ñ–¥ security monitor
            system_status = self.security_monitor.get_system_status()
            if system_status:
                indicators['cpu_usage'] = system_status.get('cpu_percent', 0)
                indicators['memory_usage'] = system_status.get('memory_percent', 0)
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ—Ü–µ—Å–∏
            suspicious_processes = self.security_monitor.get_suspicious_processes()
            indicators['suspicious_processes'] = suspicious_processes
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–æ—Ä—Ç–∏
            open_ports = self.security_monitor.scan_ports()
            indicators['open_ports'] = open_ports
            
            # –ú–µ—Ä–µ–∂–µ–≤—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è
            indicators['network_connections'] = len(self.security_monitor.get_network_connections())
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö: {e}")
            
        return indicators

    def _calculate_threat_level(self, indicators: Dict, context: Dict = None) -> ThreatLevel:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ä—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤"""
        score = 0
        
        # –ê–Ω–∞–ª—ñ–∑ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤
        suspicious_count = len(indicators.get('suspicious_processes', []))
        if suspicious_count > 5:
            score += 40
        elif suspicious_count > 2:
            score += 20
        elif suspicious_count > 0:
            score += 10
            
        # –ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ—Ä—Ç—ñ–≤
        port_count = len(indicators.get('open_ports', []))
        if port_count > 20:
            score += 30
        elif port_count > 10:
            score += 15
        elif port_count > 5:
            score += 5
            
        # –ê–Ω–∞–ª—ñ–∑ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –∑'—î–¥–Ω–∞–Ω—å
        connections = indicators.get('network_connections', 0)
        if connections > 50:
            score += 25
        elif connections > 20:
            score += 10
            
        # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if context:
            if context.get('external_ip'):
                score += 20
            if context.get('known_malware_signature'):
                score += 50
            if context.get('privilege_escalation'):
                score += 30
                
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –±–∞–ª—ñ–≤
        if score >= 80:
            return ThreatLevel.EMERGENCY
        elif score >= 60:
            return ThreatLevel.CRITICAL
        elif score >= 40:
            return ThreatLevel.HIGH
        elif score >= 20:
            return ThreatLevel.MEDIUM
        else:
            return ThreatLevel.LOW

    def _execute_threat_response(self, threat_level: ThreatLevel, target: str = None, context: Dict = None):
        """–í–∏–∫–æ–Ω—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–≥—Ä–æ–∑—É"""
        print(f"üö® –†—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑–∏: {threat_level.name}")
        
        if threat_level == ThreatLevel.CRITICAL:
            self.handle_critical_threat(target, context)
        elif threat_level == ThreatLevel.EMERGENCY:
            self.handle_emergency_threat(target, context)
        elif threat_level == ThreatLevel.HIGH:
            self.handle_high_threat(target, context)
        elif threat_level == ThreatLevel.MEDIUM:
            self.handle_medium_threat(target, context)
        else:
            self.handle_low_threat(target, context)

    def handle_critical_threat(self, target: str = None, context: Dict = None):
        """–û–±—Ä–æ–±–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—ó –∑–∞–≥—Ä–æ–∑–∏"""
        self.logger.critical(f"–ö–†–ò–¢–ò–ß–ù–ê –ó–ê–ì–†–û–ó–ê –≤–∏—è–≤–ª–µ–Ω–∞ –¥–ª—è: {target or '—Å–∏—Å—Ç–µ–º–∏'}")
        print("üî¥ –ö–†–ò–¢–ò–ß–ù–ê –ó–ê–ì–†–û–ó–ê - –í–∏–∫–æ–Ω–∞–Ω–Ω—è –µ–∫—Å—Ç—Ä–µ–Ω–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤...")
        
        # –ó–≤—É–∫–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        self.sound_alerts.play_alert_pattern("CRITICAL_THREAT", target or "—Å–∏—Å—Ç–µ–º–∞")
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥—ñ—ó
        actions = [
            "–Ü–∑–æ–ª—è—Ü—ñ—è –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤",
            "–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂–µ–≤–∏—Ö –∑'—î–¥–Ω–∞–Ω—å", 
            "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É",
            "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        ]
        
        for action in actions:
            self.logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó: {action}")
            print(f"  ‚ñ∂ {action}")
            time.sleep(0.5)

    def handle_emergency_threat(self, target: str = None, context: Dict = None):
        """–û–±—Ä–æ–±–∫–∞ –Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–æ—ó –∑–∞–≥—Ä–æ–∑–∏"""
        self.logger.critical(f"‚ö´ –ù–ê–î–ó–í–ò–ß–ê–ô–ù–ê –°–ò–¢–£–ê–¶–Ü–Ø –¥–ª—è: {target or '—Å–∏—Å—Ç–µ–º–∏'}")
        print("‚ö´ –ù–ê–î–ó–í–ò–ß–ê–ô–ù–ê –°–ò–¢–£–ê–¶–Ü–Ø - –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –≤—Å—ñ—Ö –∑–∞—Ö–∏—Å–Ω–∏—Ö —Å–∏—Å—Ç–µ–º...")
        
        # –ê–≤–∞—Ä—ñ–π–Ω–∞ —Å–∏—Ä–µ–Ω–∞
        self.sound_alerts.play_alert_pattern("EMERGENCY", target or "—Å–∏—Å—Ç–µ–º–∞")
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ñ –¥—ñ—ó
        actions = [
            "–ü–æ–≤–Ω–∞ —ñ–∑–æ–ª—è—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏",
            "–ê–≤–∞—Ä—ñ–π–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤",
            "–ù–µ–≥–∞–π–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å–ª—É–∂–±–∏ –±–µ–∑–ø–µ–∫–∏",
            "–Ü–Ω—ñ—Ü—ñ–∞—Ü—ñ—è –ø—Ä–æ—Ç–æ–∫–æ–ª—É –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è"
        ]
        
        for action in actions:
            self.logger.critical(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–æ—ó –¥—ñ—ó: {action}")
            print(f"  üö® {action}")
            time.sleep(0.3)

    def handle_high_threat(self, target: str = None, context: Dict = None):
        """–û–±—Ä–æ–±–∫–∞ –≤–∏—Å–æ–∫–æ—ó –∑–∞–≥—Ä–æ–∑–∏"""
        self.logger.warning(f"–í–ò–°–û–ö–ê –ó–ê–ì–†–û–ó–ê –¥–ª—è: {target or '—Å–∏—Å—Ç–µ–º–∏'}")
        print("üü† –í–ò–°–û–ö–ê –ó–ê–ì–†–û–ó–ê - –ü—ñ–¥–≤–∏—â–µ–Ω—ñ –∑–∞—Ö–æ–¥–∏ –±–µ–∑–ø–µ–∫–∏...")
        
        self.sound_alerts.play_alert_pattern("HIGH_THREAT", target or "—Å–∏—Å—Ç–µ–º–∞")
        
        actions = [
            "–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
            "–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –∑'—î–¥–Ω–∞–Ω—å",
            "–ê–Ω–∞–ª—ñ–∑ –ª–æ–≥—ñ–≤ —Å–∏—Å—Ç–µ–º–∏"
        ]
        
        for action in actions:
            self.logger.warning(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó: {action}")
            print(f"  ‚ñ∂ {action}")

    def handle_medium_threat(self, target: str = None, context: Dict = None):
        """–û–±—Ä–æ–±–∫–∞ —Å–µ—Ä–µ–¥–Ω—å–æ—ó –∑–∞–≥—Ä–æ–∑–∏"""
        self.logger.info(f"–°–ï–†–ï–î–ù–Ø –ó–ê–ì–†–û–ó–ê –¥–ª—è: {target or '—Å–∏—Å—Ç–µ–º–∏'}")
        print("üü° –°–ï–†–ï–î–ù–Ø –ó–ê–ì–†–û–ó–ê - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∑–∞—Ö–æ–¥–∏...")
        
        self.sound_alerts.play_alert_pattern("MEDIUM_THREAT", target or "—Å–∏—Å—Ç–µ–º–∞")
        
        actions = [
            "–ü–æ—Å–∏–ª–µ–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥",
            "–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π"
        ]
        
        for action in actions:
            self.logger.info(f"–í–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó: {action}")
            print(f"  ‚ñ∂ {action}")

    def handle_low_threat(self, target: str = None, context: Dict = None):
        """–û–±—Ä–æ–±–∫–∞ –Ω–∏–∑—å–∫–æ—ó –∑–∞–≥—Ä–æ–∑–∏"""
        self.logger.info(f"–ù–ò–ó–¨–ö–ê –ó–ê–ì–†–û–ó–ê –¥–ª—è: {target or '—Å–∏—Å—Ç–µ–º–∏'}")
        print("üü¢ –ù–ò–ó–¨–ö–ê –ó–ê–ì–†–û–ó–ê - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥...")
        
        self.sound_alerts.play_alert_pattern("LOW_THREAT", target or "—Å–∏—Å—Ç–µ–º–∞")
        
        self.logger.info("–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
        print("  ‚ñ∂ –†–µ–≥—É–ª—è—Ä–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥")

    def get_threat_history(self, last_n: int = 10) -> List[Dict]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–≥—Ä–æ–∑"""
        return self.threat_history[-last_n:]

    def get_current_threat_summary(self) -> Dict:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∑–∞–≥—Ä–æ–∑"""
        if not self.threat_history:
            return {"status": "–ê–Ω–∞–ª—ñ–∑ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–≤—Å—è"}
            
        latest = self.threat_history[-1]
        return {
            "timestamp": latest['timestamp'],
            "current_level": latest['threat_level'].name,
            "target": latest['target'],
            "indicators_count": len(latest['indicators']),
            "last_analysis": self.last_analysis_time
        }

def main():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä–æ–∑"""
    print("üöÄ NIMDA Threat Level Analyzer")
    print("=" * 50)
    
    analyzer = ThreatLevelAnalyzer()
    
    # –¢–µ—Å—Ç —Ä—ñ–∑–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤
    test_scenarios = [
        {"target": "Port 4444", "context": {"external_ip": True}},
        {"target": "ssh process", "context": {"privilege_escalation": True}},
        {"target": "bitcoin miner", "context": {"known_malware_signature": True}},
        {"target": "normal activity", "context": {}}
    ]
    
    for i, scenario in enumerate(test_scenarios, 1):
        print(f"\nüìç –¢–µ—Å—Ç–æ–≤–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π {i}:")
        threat_level = analyzer.analyze_threat_levels(
            scenario["target"], 
            scenario["context"]
        )
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {threat_level.name}")
        time.sleep(2)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
    print("\nüìä –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–≥—Ä–æ–∑:")
    history = analyzer.get_threat_history()
    for entry in history:
        print(f"  {entry['timestamp'].strftime('%H:%M:%S')} - "
              f"{entry['target']} -> {entry['threat_level'].name}")
    
    # –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    print("\nüìà –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å:")
    summary = analyzer.get_current_threat_summary()
    for key, value in summary.items():
        print(f"  {key}: {value}")

if __name__ == "__main__":
    main()
