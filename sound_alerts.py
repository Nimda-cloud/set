#!/usr/bin/env python3
"""
NIMDA Sound Alert System
–°–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∑–∞–≥—Ä–æ–∑
"""

import os
import sys
import time
import threading
import subprocess
from datetime import datetime
from enum import Enum
from colorama import Fore, Style

class ThreatLevel(Enum):
    """–†—ñ–≤–Ω—ñ –∑–∞–≥—Ä–æ–∑"""
    LOW = 1
    MEDIUM = 2
    HIGH = 3
    CRITICAL = 4
    EMERGENCY = 5

class AlertType(Enum):
    """–¢–∏–ø–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    NETWORK_INTRUSION = "network_intrusion"
    SUSPICIOUS_PROCESS = "suspicious_process"
    GPU_MINING = "gpu_mining"
    LOCKDOWN_BREACH = "lockdown_breach"
    SYSTEM_ERROR = "system_error"
    PERIPHERAL_DETECTED = "peripheral_detected"
    SSH_CONNECTION = "ssh_connection"
    PORT_SCAN = "port_scan"

class SoundAlertSystem:
    """–°–∏—Å—Ç–µ–º–∞ –∑–≤—É–∫–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    
    def __init__(self):
        self.alert_active = False
        self.sound_enabled = True
        self.last_alert_time = {}
        self.alert_intervals = {
            ThreatLevel.LOW: 30,      # 30 —Å–µ–∫—É–Ω–¥
            ThreatLevel.MEDIUM: 15,   # 15 —Å–µ–∫—É–Ω–¥
            ThreatLevel.HIGH: 5,      # 5 —Å–µ–∫—É–Ω–¥
            ThreatLevel.CRITICAL: 2,  # 2 —Å–µ–∫—É–Ω–¥–∏
            ThreatLevel.EMERGENCY: 1  # 1 —Å–µ–∫—É–Ω–¥–∞ (—Å–∏—Ä–µ–Ω–∞)
        }
        
        # –°–∏—Å—Ç–µ–º–Ω—ñ –∑–≤—É–∫–∏ macOS
        self.system_sounds = {
            ThreatLevel.LOW: "Tink",
            ThreatLevel.MEDIUM: "Pop",
            ThreatLevel.HIGH: "Sosumi",
            ThreatLevel.CRITICAL: "Basso",
            ThreatLevel.EMERGENCY: "Funk"  # –ù–∞–π–≥—É—á–Ω—ñ—à–∏–π
        }
        
        # –ö–∞—Å—Ç–æ–º–Ω—ñ –∑–≤—É–∫–∏ (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ)
        self.custom_sounds = {
            AlertType.NETWORK_INTRUSION: "network_alert.wav",
            AlertType.SUSPICIOUS_PROCESS: "process_alert.wav",
            AlertType.GPU_MINING: "mining_alert.wav",
            AlertType.LOCKDOWN_BREACH: "breach_alert.wav",
            AlertType.SYSTEM_ERROR: "error_alert.wav",
            AlertType.PERIPHERAL_DETECTED: "peripheral_alert.wav",
            AlertType.SSH_CONNECTION: "ssh_alert.wav",
            AlertType.PORT_SCAN: "scan_alert.wav"
        }
        
        self.emergency_active = False
        self.emergency_thread = None
        
    def play_system_sound(self, sound_name):
        """–í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω–∏–π –∑–≤—É–∫ macOS"""
        try:
            subprocess.run(['afplay', f'/System/Library/Sounds/{sound_name}.aiff'], 
                         check=False, capture_output=True)
        except Exception:
            # Fallback –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫—É
            subprocess.run(['say', 'Alert'], check=False, capture_output=True)
    
    def generate_beep_sequence(self, threat_level):
        """–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –∑–≤—É–∫–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤"""
        beep_patterns = {
            ThreatLevel.LOW: [1],           # –û–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π —Å–∏–≥–Ω–∞–ª
            ThreatLevel.MEDIUM: [1, 1],     # –î–≤–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–∏
            ThreatLevel.HIGH: [1, 1, 1],    # –¢—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–∏
            ThreatLevel.CRITICAL: [2, 1, 2], # –î–æ–≤–≥–∏–π-–∫–æ—Ä–æ—Ç–∫–∏–π-–¥–æ–≤–≥–∏–π
            ThreatLevel.EMERGENCY: [3, 3, 3] # –¢—Ä–∏ –¥–æ–≤–≥–∏—Ö —Å–∏–≥–Ω–∞–ª–∏
        }
        
        pattern = beep_patterns.get(threat_level, [1])
        
        for duration in pattern:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π beep
            if duration == 1:  # –ö–æ—Ä–æ—Ç–∫–∏–π
                subprocess.run(['osascript', '-e', 'beep 1'], check=False)
            elif duration == 2:  # –°–µ—Ä–µ–¥–Ω—ñ–π
                subprocess.run(['osascript', '-e', 'beep 2'], check=False)
            else:  # –î–æ–≤–≥–∏–π
                subprocess.run(['osascript', '-e', 'beep 3'], check=False)
            
            time.sleep(0.2)  # –ü–∞—É–∑–∞ –º—ñ–∂ —Å–∏–≥–Ω–∞–ª–∞–º–∏
    
    def play_voice_alert(self, message, threat_level):
        """–í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
        try:
            voice_settings = {
                ThreatLevel.LOW: "Alex",
                ThreatLevel.MEDIUM: "Victoria", 
                ThreatLevel.HIGH: "Daniel",
                ThreatLevel.CRITICAL: "Fiona",
                ThreatLevel.EMERGENCY: "Alex"
            }
            
            rate_settings = {
                ThreatLevel.LOW: "200",
                ThreatLevel.MEDIUM: "220",
                ThreatLevel.HIGH: "250", 
                ThreatLevel.CRITICAL: "280",
                ThreatLevel.EMERGENCY: "300"
            }
            
            voice = voice_settings.get(threat_level, "Alex")
            rate = rate_settings.get(threat_level, "200")
            
            # –ì–æ–ª–æ—Å–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            subprocess.run([
                'say', '-v', voice, '-r', rate, message
            ], check=False)
            
        except Exception:
            # Fallback - –ø—Ä–æ—Å—Ç–∏–π beep
            subprocess.run(['osascript', '-e', 'beep'], check=False)
    
    def emergency_siren(self):
        """–ê–≤–∞—Ä—ñ–π–Ω–∞ —Å–∏—Ä–µ–Ω–∞ –¥–ª—è –Ω–∞–π–≤–∏—â–æ–≥–æ —Ä—ñ–≤–Ω—è –∑–∞–≥—Ä–æ–∑–∏"""
        siren_messages = [
            "EMERGENCY! SECURITY BREACH DETECTED!",
            "–°–ò–°–¢–ï–ú–ê –ü–Ü–î –ê–¢–ê–ö–û–Æ!",
            "CRITICAL THREAT LEVEL!",
            "–ù–ï–í–Ü–î–ö–õ–ê–î–ù–Ü –ó–ê–•–û–î–ò –ë–ï–ó–ü–ï–ö–ò!"
        ]
        
        while self.emergency_active:
            # –í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Å–∏—Ä–µ–Ω—É (—à–≤–∏–¥–∫–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –∑–≤—É–∫—ñ–≤)
            for freq in [800, 1000, 800, 1000, 800]:
                if not self.emergency_active:
                    break
                subprocess.run(['osascript', '-e', f'beep {freq//200}'], check=False)
                time.sleep(0.1)
            
            # –ì–æ–ª–æ—Å–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            if self.emergency_active:
                message = siren_messages[int(time.time()) % len(siren_messages)]
                self.play_voice_alert(message, ThreatLevel.EMERGENCY)
            
            time.sleep(2)  # –ö–æ—Ä–æ—Ç–∫–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏ —Å–∏—Ä–µ–Ω–∏
    
    def start_emergency_siren(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤–∞—Ä—ñ–π–Ω—É —Å–∏—Ä–µ–Ω—É"""
        if not self.emergency_active:
            self.emergency_active = True
            self.emergency_thread = threading.Thread(target=self.emergency_siren, daemon=True)
            self.emergency_thread.start()
            print(f"{Fore.RED}üö® EMERGENCY SIREN ACTIVATED{Style.RESET_ALL}")
    
    def stop_emergency_siren(self):
        """–ó—É–ø–∏–Ω–∏—Ç–∏ –∞–≤–∞—Ä—ñ–π–Ω—É —Å–∏—Ä–µ–Ω—É"""
        if self.emergency_active:
            self.emergency_active = False
            if self.emergency_thread:
                self.emergency_thread.join(timeout=1)
            print(f"{Fore.YELLOW}üîá Emergency siren stopped{Style.RESET_ALL}")
    
    def can_play_alert(self, alert_type, threat_level):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º–æ–∂–Ω–∞ –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏)"""
        if not self.sound_enabled:
            return False
        
        current_time = time.time()
        key = f"{alert_type}_{threat_level}"
        
        if key in self.last_alert_time:
            interval = self.alert_intervals[threat_level]
            if current_time - self.last_alert_time[key] < interval:
                return False
        
        self.last_alert_time[key] = current_time
        return True
    
    def trigger_alert(self, alert_type, threat_level, message="Security Alert", details=""):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∑–≤—É–∫–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
        if not self.can_play_alert(alert_type, threat_level):
            return
        
        print(f"{Fore.YELLOW}üîä Sound Alert: {alert_type.value} - {threat_level.name}{Style.RESET_ALL}")
        
        # –î–ª—è –Ω–∞–π–≤–∏—â–æ–≥–æ —Ä—ñ–≤–Ω—è –∑–∞–≥—Ä–æ–∑–∏ - –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏—Ä–µ–Ω—É
        if threat_level == ThreatLevel.EMERGENCY:
            self.start_emergency_siren()
            return
        
        # –ó–≤—É–∫–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        def play_alert():
            try:
                # 1. –°–∏—Å—Ç–µ–º–Ω–∏–π –∑–≤—É–∫
                sound_name = self.system_sounds[threat_level]
                self.play_system_sound(sound_name)
                
                time.sleep(0.3)
                
                # 2. –ü–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å beep-—ñ–≤
                self.generate_beep_sequence(threat_level)
                
                time.sleep(0.5)
                
                # 3. –ì–æ–ª–æ—Å–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è HIGH, CRITICAL
                if threat_level in [ThreatLevel.HIGH, ThreatLevel.CRITICAL]:
                    alert_messages = {
                        AlertType.NETWORK_INTRUSION: "Network intrusion detected",
                        AlertType.SUSPICIOUS_PROCESS: "Suspicious process detected", 
                        AlertType.GPU_MINING: "Possible mining activity detected",
                        AlertType.LOCKDOWN_BREACH: "Lockdown system breach",
                        AlertType.SYSTEM_ERROR: "Critical system error",
                        AlertType.PERIPHERAL_DETECTED: "Unauthorized peripheral detected",
                        AlertType.SSH_CONNECTION: "Suspicious SSH connection",
                        AlertType.PORT_SCAN: "Port scanning detected"
                    }
                    
                    voice_message = alert_messages.get(alert_type, message)
                    if details:
                        voice_message += f". {details}"
                    
                    self.play_voice_alert(voice_message, threat_level)
                
            except Exception as e:
                print(f"{Fore.RED}Sound alert error: {e}{Style.RESET_ALL}")
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        alert_thread = threading.Thread(target=play_alert, daemon=True)
        alert_thread.start()
    
    def enable_sound(self):
        """–£–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–≤—É–∫"""
        self.sound_enabled = True
        print(f"{Fore.GREEN}üîä Sound alerts enabled{Style.RESET_ALL}")
    
    def disable_sound(self):
        """–í–∏–º–∫–Ω—É—Ç–∏ –∑–≤—É–∫"""
        self.sound_enabled = False
        self.stop_emergency_siren()
        print(f"{Fore.YELLOW}üîá Sound alerts disabled{Style.RESET_ALL}")
    
    def test_all_alerts(self):
        """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ —Ç–∏–ø–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        print(f"{Fore.CYAN}üéµ Testing all alert levels...{Style.RESET_ALL}")
        
        test_cases = [
            (AlertType.SYSTEM_ERROR, ThreatLevel.LOW, "Low level test"),
            (AlertType.PERIPHERAL_DETECTED, ThreatLevel.MEDIUM, "Medium level test"),
            (AlertType.SUSPICIOUS_PROCESS, ThreatLevel.HIGH, "High level test"),
            (AlertType.NETWORK_INTRUSION, ThreatLevel.CRITICAL, "Critical level test"),
        ]
        
        for alert_type, threat_level, message in test_cases:
            print(f"Testing {threat_level.name}...")
            self.trigger_alert(alert_type, threat_level, message)
            time.sleep(3)  # –ü–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
        
        print(f"{Fore.GREEN}‚úÖ Alert testing complete{Style.RESET_ALL}")


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å
sound_system = SoundAlertSystem()

def play_alert(alert_type, threat_level, message="Alert", details=""):
    """–ó—Ä—É—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    sound_system.trigger_alert(alert_type, threat_level, message, details)

def emergency_alert(message="EMERGENCY"):
    """–ê–≤–∞—Ä—ñ–π–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
    sound_system.trigger_alert(AlertType.LOCKDOWN_BREACH, ThreatLevel.EMERGENCY, message)

def test_sounds():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –∑–≤—É–∫—ñ–≤"""
    sound_system.test_all_alerts()

if __name__ == "__main__":
    # –î–µ–º–æ —Å–∏—Å—Ç–µ–º–∏ –∑–≤—É–∫—ñ–≤
    print("NIMDA Sound Alert System Demo")
    print("=" * 40)
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "test":
            test_sounds()
        elif sys.argv[1] == "emergency":
            emergency_alert("TEST EMERGENCY")
            time.sleep(5)
            sound_system.stop_emergency_siren()
    else:
        print("Usage:")
        print("  python3 sound_alerts.py test      - Test all alert levels")
        print("  python3 sound_alerts.py emergency - Test emergency siren")
