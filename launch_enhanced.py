#!/usr/bin/env python3
"""
NIMDA-Mac Enhanced Launch Script
–ó–∞–ø—É—Å–∫ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –±–µ–∑–ø–µ–∫–∏ –∑ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–æ—é —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
"""

import os
import sys
import subprocess
import argparse
from datetime import datetime

def setup_environment():
    """–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    print("üîß –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ NIMDA-Mac...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–∞–π–ª—É
    if not os.access(__file__, os.X_OK):
        print("‚ö†Ô∏è –ù–∞–¥–∞–Ω–Ω—è –ø—Ä–∞–≤ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è...")
        os.chmod(__file__, 0o755)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞–ø–∫–∏
    required_dirs = ['rules', 'logs', 'data', 'configs']
    for dir_name in required_dirs:
        if not os.path.exists(dir_name):
            os.makedirs(dir_name)
            print(f"üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É: {dir_name}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ .gitignore
    gitignore_path = '.gitignore'
    if os.path.exists(gitignore_path):
        with open(gitignore_path, 'r') as f:
            content = f.read()
        
        required_ignores = ['rules/', '*.rules', '*.log', '*.db']
        missing_ignores = [ig for ig in required_ignores if ig not in content]
        
        if missing_ignores:
            with open(gitignore_path, 'a') as f:
                f.write("\n# NIMDA-Mac security files\n")
                for ignore in missing_ignores:
                    f.write(f"{ignore}\n")
            print(f"üìù –û–Ω–æ–≤–ª–µ–Ω–æ .gitignore –∑: {', '.join(missing_ignores)}")

def download_initial_rules():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –ø—Ä–∞–≤–∏–ª –±–µ–∑–ø–µ–∫–∏"""
    print("\nüì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –ø—Ä–∞–≤–∏–ª –±–µ–∑–ø–µ–∫–∏...")
    
    try:
        from core.rule_manager import RuleManager
        manager = RuleManager()
        success_count = manager.update_all_rules()
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {success_count} –Ω–∞–±–æ—Ä—ñ–≤ –ø—Ä–∞–≤–∏–ª")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª
        rules = manager.load_rules()
        print(f"üìä –ó–∞–≥–∞–ª–æ–º –ø—Ä–∞–≤–∏–ª –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: {len(rules)}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞: {e}")
        print("üí° –ü—Ä–∞–≤–∏–ª–∞ –±—É–¥—É—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞")

def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'tkinter', 'psutil', 'requests', 'sqlite3'
    ]
    
    missing_packages = []
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package}")
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏: {', '.join(missing_packages)}")
        print("üì¶ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö –∫–æ–º–∞–Ω–¥–æ—é: pip install -r requirements.txt")
        return False
    
    return True

def check_ollama():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ Ollama"""
    print("\nü§ñ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –®–Ü (Ollama)...")
    
    try:
        import requests
        response = requests.get("http://localhost:11434/api/tags", timeout=3)
        if response.status_code == 200:
            models = response.json().get('models', [])
            print(f"‚úÖ Ollama –¥–æ—Å—Ç—É–ø–Ω–∞, –º–æ–¥–µ–ª–µ–π: {len(models)}")
            if models:
                print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ: {', '.join([m.get('name', 'Unknown') for m in models[:3]])}")
            return True
        else:
            print(f"‚ö†Ô∏è Ollama –≤—ñ–¥–ø–æ–≤—ñ–ª–∞ –∑ –∫–æ–¥–æ–º: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        print("üí° –î–ª—è —Ä–æ–±–æ—Ç–∏ –®–Ü –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Ollama: https://ollama.ai/download")
    
    return False

def launch_gui():
    """–ó–∞–ø—É—Å–∫ GUI"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ GUI...")
    try:
        subprocess.run([sys.executable, "gui/nimda_gui.py"], check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É GUI: {e}")
        return False
    except KeyboardInterrupt:
        print("\nüõë GUI –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    return True

def launch_demo():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    print("\nüé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó...")
    try:
        subprocess.run([sys.executable, "nimda_enhanced_demo.py"], check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
        return False
    except KeyboardInterrupt:
        print("\nüõë –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    return True

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    parser = argparse.ArgumentParser(description="NIMDA-Mac Enhanced Security System")
    parser.add_argument('--gui', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç–∏ GUI')
    parser.add_argument('--demo', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é')
    parser.add_argument('--setup-only', action='store_true', help='–¢—ñ–ª—å–∫–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞')
    parser.add_argument('--skip-rules', action='store_true', help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª')
    
    args = parser.parse_args()
    
    print("üõ°Ô∏è NIMDA-Mac Enhanced Security System")
    print("=" * 50)
    print(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    setup_environment()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    if not check_dependencies():
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ!")
        return 1
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª (—è–∫—â–æ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ)
    if not args.skip_rules:
        download_initial_rules()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Ollama
    check_ollama()
    
    if args.setup_only:
        print("\n‚úÖ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return 0
    
    # –ó–∞–ø—É—Å–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
    if args.gui:
        success = launch_gui()
    elif args.demo:
        success = launch_demo()
    else:
        # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –≤–∏–±—ñ—Ä
        print("\nüéØ –û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫—É:")
        print("1. GUI (–ì—Ä–∞—Ñ—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å)")
        print("2. Demo (–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π)")
        print("3. –í–∏—Ö—ñ–¥")
        
        choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä (1-3): ").strip()
        
        if choice == '1':
            success = launch_gui()
        elif choice == '2':
            success = launch_demo()
        elif choice == '3':
            print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            return 0
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!")
            return 1
    
    if success:
        print("\nüéâ –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        return 0
    else:
        print("\nüí• –í–∏–Ω–∏–∫–ª–∏ –ø–æ–º–∏–ª–∫–∏ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è!")
        return 1

if __name__ == "__main__":
    exit(main())
