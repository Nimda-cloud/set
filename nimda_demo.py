#!/usr/bin/env python3
"""
NIMDA Demo - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏ –±–µ–∑ TMUX
–ü–æ–∫–∞–∑—É—î —è–∫ –ø—Ä–∞—Ü—é—î –∫–æ–∂–µ–Ω –º–æ–Ω—ñ—Ç–æ—Ä –æ–∫—Ä–µ–º–æ
"""

import sys
import os

# –î–æ–¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ —à–ª—è—Ö—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from nimda_integrated import (
    NIMDAIntegrated, NetworkMonitor, ProcessMonitor, GPUMonitor,
    SecurityMonitor, LogMonitor, SystemMonitor, LockdownSystem, 
    SecureEnclaveKey, Fore, Style
)

def demo_monitors():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤"""
    print(f"{Fore.CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë                      NIMDA DEMO MODE                            ‚ïë")
    print("‚ïë              –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤                      ‚ïë") 
    print(f"‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Style.RESET_ALL}\n")
    
    monitors = [
        ("Network Monitor", NetworkMonitor),
        ("Process Monitor", ProcessMonitor), 
        ("GPU Monitor", GPUMonitor),
        ("Security Monitor", SecurityMonitor),
        ("Log Monitor", LogMonitor),
        ("System Monitor", SystemMonitor)
    ]
    
    print("–î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏:")
    for i, (name, _) in enumerate(monitors, 1):
        print(f"  {i}. {name}")
    
    print(f"\n{Fore.YELLOW}–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –º–æ–Ω—ñ—Ç–æ—Ä–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó (1-6) –∞–±–æ 'q' –¥–ª—è –≤–∏—Ö–æ–¥—É:{Style.RESET_ALL}")
    
    while True:
        try:
            choice = input("> ").strip().lower()
            
            if choice == 'q':
                print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
                
            if choice.isdigit() and 1 <= int(choice) <= 6:
                name, monitor_class = monitors[int(choice) - 1]
                print(f"\nüöÄ –ó–∞–ø—É—Å–∫ {name}...")
                print(f"{Fore.YELLOW}–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é{Style.RESET_ALL}\n")
                
                try:
                    monitor = monitor_class()
                    monitor.run()
                except KeyboardInterrupt:
                    print(f"\n{Fore.CYAN}üìã –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é...{Style.RESET_ALL}\n")
                    continue
                except Exception as e:
                    print(f"\n{Fore.RED}‚ùå –ü–æ–º–∏–ª–∫–∞: {e}{Style.RESET_ALL}\n")
                    continue
            else:
                print(f"{Fore.RED}‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 6 –∞–±–æ 'q'{Style.RESET_ALL}")
                
        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!{Style.RESET_ALL}")
            break
        except Exception as e:
            print(f"{Fore.RED}‚ùå –ü–æ–º–∏–ª–∫–∞: {e}{Style.RESET_ALL}")

def demo_lockdown():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è lockdown —Å–∏—Å—Ç–µ–º–∏"""
    print(f"\n{Fore.RED}üîí LOCKDOWN DEMO{Style.RESET_ALL}")
    print("=" * 50)
    
    lockdown = LockdownSystem()
    secure_key = SecureEnclaveKey()
    
    print(f"Key exists: {secure_key.key_exists}")
    print(f"Lockdown active: {lockdown.active}")
    
    print(f"\n{Fore.YELLOW}–ö–æ–º–∞–Ω–¥–∏:{Style.RESET_ALL}")
    print("  'enable' - —É–≤—ñ–º–∫–Ω—É—Ç–∏ lockdown")
    print("  'disable' - –≤–∏–º–∫–Ω—É—Ç–∏ lockdown") 
    print("  'status' - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å")
    print("  'back' - –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    
    while True:
        try:
            cmd = input("\nLockdown> ").strip().lower()
            
            if cmd == 'enable':
                if not secure_key.key_exists:
                    print("üîë –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—é—á–∞ –±–µ–∑–ø–µ–∫–∏...")
                    secure_key.create_key()
                
                print("üîí –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è lockdown...")
                if lockdown.enable_lockdown():
                    print(f"{Fore.GREEN}‚úÖ Lockdown –∞–∫—Ç–∏–≤–Ω–∏–π{Style.RESET_ALL}")
                else:
                    print(f"{Fore.RED}‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ lockdown{Style.RESET_ALL}")
                    
            elif cmd == 'disable':
                print("üîì –í–∏–º–∫–Ω–µ–Ω–Ω—è lockdown...")
                if lockdown.disable_lockdown():
                    print(f"{Fore.GREEN}‚úÖ Lockdown –≤–∏–º–∫–Ω–µ–Ω–∏–π{Style.RESET_ALL}")
                else:
                    print(f"{Fore.RED}‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–º–∫–Ω—É—Ç–∏ lockdown{Style.RESET_ALL}")
                    
            elif cmd == 'status':
                print(f"Key exists: {secure_key.key_exists}")
                print(f"Lockdown active: {lockdown.active}")
                print(f"Blocked services: {lockdown.blocked_services}")
                
            elif cmd == 'back':
                break
                
            else:
                print(f"{Fore.RED}‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞{Style.RESET_ALL}")
                
        except KeyboardInterrupt:
            break

def main():
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–µ–º–æ"""
    while True:
        print(f"\n{Fore.CYAN}üéØ NIMDA DEMO - –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ{Style.RESET_ALL}")
        print("=" * 40)
        print("1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤")
        print("2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è lockdown —Å–∏—Å—Ç–µ–º–∏")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å TMUX")
        print("4. –í–∏—Ö—ñ–¥")
        
        try:
            choice = input(f"\n{Fore.YELLOW}–í–∞—à –≤–∏–±—ñ—Ä (1-4): {Style.RESET_ALL}").strip()
            
            if choice == '1':
                demo_monitors()
            elif choice == '2':
                demo_lockdown()
            elif choice == '3':
                print(f"{Fore.CYAN}üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É...{Style.RESET_ALL}")
                nimda = NIMDAIntegrated()
                nimda.run()
            elif choice == '4':
                print(f"{Fore.GREEN}üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!{Style.RESET_ALL}")
                break
            else:
                print(f"{Fore.RED}‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä{Style.RESET_ALL}")
                
        except KeyboardInterrupt:
            print(f"\n{Fore.GREEN}üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!{Style.RESET_ALL}")
            break

if __name__ == "__main__":
    main()
