#!/usr/bin/env python3
"""
NIMDA System Complete Demo
–ü–æ–≤–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º–∏ NIMDA
"""

import time
import sys
from datetime import datetime

def show_header():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    print("üõ°Ô∏è" + "=" * 60 + "üõ°Ô∏è")
    print("üöÄ NIMDA SECURITY SYSTEM - COMPLETE DEMO üöÄ")
    print("üõ°Ô∏è" + "=" * 60 + "üõ°Ô∏è")
    print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("üìã –í–µ—Ä—Å—ñ—è: 2.5 Enhanced")
    print("üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: macOS M1 Max")
    print()

def demo_threat_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É –∑–∞–≥—Ä–æ–∑"""
    print("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ê–ù–ê–õ–Ü–ó–£ –ó–ê–ì–†–û–ó")
    print("-" * 40)
    
    scenarios = [
        {
            "name": "üü¢ –ù–æ—Ä–º–∞–ª—å–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å",
            "description": "Chrome –±—Ä–∞—É–∑–µ—Ä, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Ä–æ–±–æ—Ç–∞",
            "level": "LOW",
            "color": "\033[92m"
        },
        {
            "name": "üü° –ü—ñ–¥–æ–∑—Ä—ñ–ª–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å",
            "description": "SSH –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ IP",
            "level": "MEDIUM", 
            "color": "\033[93m"
        },
        {
            "name": "üü† –í–∏—Å–æ–∫–∞ –∑–∞–≥—Ä–æ–∑–∞",
            "description": "–í—ñ–¥–∫—Ä–∏—Ç–∏–π –ø–æ—Ä—Ç 4444 (Metasploit)",
            "level": "HIGH",
            "color": "\033[95m"
        },
        {
            "name": "üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞",
            "description": "–í–∏—è–≤–ª–µ–Ω–æ –ø—ñ–¥–ø–∏—Å —Ç—Ä–æ—è–Ω–∞",
            "level": "CRITICAL",
            "color": "\033[91m"
        },
        {
            "name": "‚ö´ –ù–∞–¥–∑–≤–∏—á–∞–π–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è",
            "description": "–ú–∞–π–Ω–µ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ + –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ–ª–µ—ó–≤",
            "level": "EMERGENCY",
            "color": "\033[90m"
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"{scenario['color']}{scenario['name']}\033[0m")
        print(f"  üìù {scenario['description']}")
        print(f"  üìä –†—ñ–≤–µ–Ω—å: {scenario['level']}")
        
        if scenario['level'] in ['CRITICAL', 'EMERGENCY']:
            print("  üö® –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –¥—ñ—ó:")
            actions = ["–Ü–∑–æ–ª—è—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤", "–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—ñ–≤", "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"]
            for action in actions:
                print(f"    ‚ñ∂ {action}")
                time.sleep(0.3)
        
        print()
        time.sleep(1)

def demo_sound_alerts():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∑–≤—É–∫–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    print("üîä –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ó–í–£–ö–û–í–ò–• –°–ü–û–í–Ü–©–ï–ù–¨")
    print("-" * 40)
    
    sound_levels = [
        ("üü¢ LOW", "Tink", "–õ–µ–≥–∫–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–¥—ñ–π"),
        ("üü° MEDIUM", "Pop", "–ü–æ–º—ñ—Ä–Ω–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —É–≤–∞–≥–∏"),
        ("üü† HIGH", "Sosumi", "–ü–æ–º—ñ—Ç–Ω–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –¥—ñ–π"),
        ("üî¥ CRITICAL", "Basso", "–ì—É—á–Ω–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–¥—ñ–π"),
        ("‚ö´ EMERGENCY", "Funk", "–°–∏—Ä–µ–Ω–∞ –¥–ª—è –Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π")
    ]
    
    for level, sound, description in sound_levels:
        print(f"{level}: {sound}")
        print(f"  üéµ {description}")
        print(f"  üì¢ –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è: /System/Library/Sounds/{sound}.aiff")
        print()
        time.sleep(0.8)

def demo_ai_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è AI —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó"""
    print("ü§ñ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø AI –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á")
    print("-" * 40)
    
    ai_features = [
        {
            "provider": "Ollama (qwen2.5-coder)",
            "model": "qwen2.5-coder:latest",
            "purpose": "–ê–Ω–∞–ª—ñ–∑ –∑–∞–≥—Ä–æ–∑ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó",
            "status": "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π"
        },
        {
            "provider": "Gemini",
            "model": "gemini-2.0-flash",
            "purpose": "–ì–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–∞ –∑–≤—ñ—Ç–∏",
            "status": "‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π"
        },
        {
            "provider": "Cohere Reranker",
            "model": "rerank-english-v3.0",
            "purpose": "–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—ñ",
            "status": "‚úÖ –Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π"
        }
    ]
    
    for ai in ai_features:
        print(f"üîπ {ai['provider']}")
        print(f"  üìä –ú–æ–¥–µ–ª—å: {ai['model']}")
        print(f"  üéØ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {ai['purpose']}")
        print(f"  üîÑ –°—Ç–∞—Ç—É—Å: {ai['status']}")
        print()

def demo_system_capabilities():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º–∏"""
    print("‚öôÔ∏è –ú–û–ñ–õ–ò–í–û–°–¢–Ü –°–ò–°–¢–ï–ú–ò")
    print("-" * 40)
    
    capabilities = [
        "üîç –†–µ–∞–ª—å–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ä–µ–∂—ñ",
        "üñ•Ô∏è –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ (USB, Bluetooth, Thunderbolt)",
        "‚öôÔ∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—ñ–≤ —Ç–∞ —ó—Ö –∞–Ω–∞–ª—ñ–∑",
        "üõ°Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏—è–≤–ª–µ–Ω–Ω—è –º–∞–ª–≤–∞—Ä–µ",
        "üîä –†–æ–∑—É–º–Ω—ñ –∑–≤—É–∫–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è",
        "ü§ñ AI-–∞–Ω–∞–ª—ñ–∑ –∑–∞–≥—Ä–æ–∑",
        "üìä –°–∏—Å—Ç–µ–º–∞ —Ä—ñ–≤–Ω—ñ–≤ –∑–∞–≥—Ä–æ–∑",
        "üåô –¢–µ–º–Ω–∞ —Ç–µ–º–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É",
        "üìù –ö–æ–º–ø–ª–µ–∫—Å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è",
        "üîê –ë–µ–∑–ø–µ—á–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è credentials"
    ]
    
    for i, capability in enumerate(capabilities, 1):
        print(f"{i:2d}. {capability}")
        time.sleep(0.2)
    
    print()

def demo_file_structure():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ñ–∞–π–ª—ñ–≤"""
    print("üìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–£")
    print("-" * 40)
    
    structure = {
        "–û—Å–Ω–æ–≤–Ω—ñ –º–æ–¥—É–ª—ñ": [
            "nimda_integrated.py - –ì–æ–ª–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å",
            "nimda_tkinter.py - GUI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
            "security_monitor.py - –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–ø–µ–∫–∏",
            "malware_detection.py - –í–∏—è–≤–ª–µ–Ω–Ω—è –º–∞–ª–≤–∞—Ä–µ"
        ],
        "AI —Ç–∞ –∑–≤—É–∫": [
            "ai_providers.py - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏",
            "sound_alerts.py - –ó–≤—É–∫–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è",
            "sound_alerts_enhanced.py - –†–æ–∑—à–∏—Ä–µ–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è",
            "threat_level_analyzer.py - –ê–Ω–∞–ª—ñ–∑ –∑–∞–≥—Ä–æ–∑"
        ],
        "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è": [
            "test_threat_analyzer.py - –¢–µ—Å—Ç –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞",
            "test_*.py - –ú–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏",
            "demo_sounds.py - –î–µ–º–æ –∑–≤—É–∫—ñ–≤"
        ],
        "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è": [
            "README*.md - –î–µ—Ç–∞–ª—å–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è",
            "FIXES_SUMMARY.md - –û–≥–ª—è–¥ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å"
        ]
    }
    
    for category, files in structure.items():
        print(f"üìÇ {category}:")
        for file in files:
            print(f"  üìÑ {file}")
        print()

def demo_installation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —ñ–Ω—Å—Ç–∞–ª—è—Ü—ñ—ó"""
    print("üõ†Ô∏è –®–í–ò–î–ö–ê –Ü–ù–°–¢–ê–õ–Ø–¶–Ü–Ø")
    print("-" * 40)
    
    steps = [
        "1Ô∏è‚É£ git clone <repository>",
        "2Ô∏è‚É£ cd NIMDA/set",
        "3Ô∏è‚É£ pip3 install -r requirements.txt",
        "4Ô∏è‚É£ ollama pull qwen2.5-coder:latest",
        "5Ô∏è‚É£ ./start_nimda_tkinter.sh",
        "6Ô∏è‚É£ –ì–æ—Ç–æ–≤–æ! üéâ"
    ]
    
    for step in steps:
        print(f"  {step}")
        time.sleep(0.3)
    
    print()

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    show_header()
    
    demos = [
        ("üîç –ê–Ω–∞–ª—ñ–∑ –∑–∞–≥—Ä–æ–∑", demo_threat_analysis),
        ("üîä –ó–≤—É–∫–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", demo_sound_alerts),
        ("ü§ñ AI —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è", demo_ai_integration),
        ("‚öôÔ∏è –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å–∏—Å—Ç–µ–º–∏", demo_system_capabilities),
        ("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É", demo_file_structure),
        ("üõ†Ô∏è –Ü–Ω—Å—Ç–∞–ª—è—Ü—ñ—è", demo_installation)
    ]
    
    for title, demo_func in demos:
        input(f"\nüé¨ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó: {title}")
        demo_func()
        time.sleep(1)
    
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 62)
    print("üöÄ NIMDA Security System –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
    print("üìû –î–ª—è –∑–∞–ø—É—Å–∫—É: ./start_nimda_tkinter.sh")
    print("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: README*.md")
    print("=" * 62)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüõë –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(0)
