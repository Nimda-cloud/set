#!/usr/bin/env python3
"""
NIMDA Project Reorganization Script
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É NIMDA

–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —Ñ–∞–π–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª—è—î —ñ–º–ø–æ—Ä—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.
"""

import os
import shutil
import re
from pathlib import Path

class NIMDAReorganizer:
    def __init__(self, base_path: str):
        self.base_path = Path(base_path)
        self.backup_dir = self.base_path / "backup_before_reorganize"
        
        # –ù–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
        self.new_structure = {
            'scripts': ['start_nimda.sh', 'start_nimda_tkinter.sh', 'start_nimda_security.sh', 
                       'setup_gemini.sh', 'test_gemini_curl.sh'],
            'docs': ['README_DEVICES_PROCESSES.md', 'README_MALWARE_DETECTION.md', 
                    'README_SECURITY.md', 'README_THREAT_LEVELS.md', 'README_DARK_THEME.md',
                    'COMPREHENSIVE_FIXES_SUMMARY.md', 'FIXES_SUMMARY.md', 
                    'PRIVILEGES_INSTRUCTIONS.md'],
            'tests': [f for f in os.listdir(self.base_path) if f.startswith('test_') and f.endswith('.py')],
            'demos': ['demo_sounds.py', 'nimda_complete_demo.py'],
            'configs': ['ai_providers_config.json', 'security_policy.json'],
            'data': ['scheduled_tasks.db', 'security_events.db']
        }
        
        # –§–∞–π–ª–∏ —â–æ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –≤ –∫–æ—Ä–µ–Ω—ñ (–≤–∞–∂–ª–∏–≤—ñ)
        self.root_files = [
            'nimda_integrated.py',
            'nimda_tkinter.py', 
            'security_monitor.py',
            'malware_detection.py',
            'ai_providers.py',
            'llm_security_agent.py',
            'sound_alerts.py',
            'sound_alerts_enhanced.py',
            'security_display.py',
            'task_scheduler.py',
            'threat_level_analyzer.py',
            'requirements.txt',
            'README.md'
        ]
        
        # –ú–∞–ø–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
        self.import_mapping = {}

    def create_backup(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –ø—Ä–æ–µ–∫—Ç—É"""
        print("üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó...")
        
        if self.backup_dir.exists():
            shutil.rmtree(self.backup_dir)
        
        # –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤ backup
        shutil.copytree(self.base_path, self.backup_dir, 
                       ignore=shutil.ignore_patterns('__pycache__', '*.pyc', '.git'))
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞: {self.backup_dir}")

    def create_directories(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó"""
        print("üìÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π...")
        
        directories = ['scripts', 'docs', 'tests', 'demos', 'configs', 'data', 'src']
        
        for dir_name in directories:
            dir_path = self.base_path / dir_name
            dir_path.mkdir(exist_ok=True)
            print(f"   üìÇ –°—Ç–≤–æ—Ä–µ–Ω–æ: {dir_name}/")

    def move_files(self):
        """–ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ —Ñ–∞–π–ª–∏ –≤ –Ω–æ–≤—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó"""
        print("üöö –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤...")
        
        for target_dir, files in self.new_structure.items():
            target_path = self.base_path / target_dir
            
            for file_name in files:
                source_file = self.base_path / file_name
                target_file = target_path / file_name
                
                if source_file.exists() and source_file != target_file:
                    shutil.move(str(source_file), str(target_file))
                    print(f"   üìÑ {file_name} ‚Üí {target_dir}/")
                    
                    # –ó–±–µ—Ä–µ–≥—Ç–∏ –º–∞–ø—É –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
                    if file_name.endswith('.py'):
                        module_name = file_name[:-3]  # –ü—Ä–∏–±—Ä–∞—Ç–∏ .py
                        self.import_mapping[module_name] = f"{target_dir}.{module_name}"

    def fix_imports_in_file(self, file_path: Path):
        """–í–∏–ø—Ä–∞–≤–∏—Ç–∏ —ñ–º–ø–æ—Ä—Ç–∏ –≤ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—ñ"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            
            # –í–∏–ø—Ä–∞–≤–∏—Ç–∏ —ñ–º–ø–æ—Ä—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
            for old_module, new_module in self.import_mapping.items():
                # –í–∏–ø—Ä–∞–≤–∏—Ç–∏ direct imports
                content = re.sub(f'import {old_module}', f'import {new_module}', content)
                content = re.sub(f'from {old_module} import', f'from {new_module} import', content)
                
                # –í–∏–ø—Ä–∞–≤–∏—Ç–∏ relative imports —è–∫—â–æ —Ñ–∞–π–ª –≤ –ø—ñ–¥–ø–∞–ø—Ü—ñ
                if str(file_path).find('/tests/') != -1:
                    # –î–ª—è —Ç–µ—Å—Ç—ñ–≤ –¥–æ–¥–∞—Ç–∏ sys.path
                    if 'sys.path' not in content and any(old in content for old in self.import_mapping.keys()):
                        sys_path_addition = '''import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

'''
                        # –î–æ–¥–∞—Ç–∏ –ø—ñ—Å–ª—è shebang —Ç–∞ docstring
                        lines = content.split('\n')
                        insert_index = 0
                        
                        # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ shebang
                        if lines[0].startswith('#!'):
                            insert_index = 1
                        
                        # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ docstring
                        if insert_index < len(lines) and lines[insert_index].strip().startswith('"""'):
                            for i in range(insert_index + 1, len(lines)):
                                if lines[i].strip().endswith('"""'):
                                    insert_index = i + 1
                                    break
                        
                        lines.insert(insert_index, sys_path_addition)
                        content = '\n'.join(lines)
            
            # –ó–∞–ø–∏—Å–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –±—É–ª–∏ –∑–º—ñ–Ω–∏
            if content != original_content:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                print(f"   üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —ñ–º–ø–æ—Ä—Ç–∏: {file_path.name}")
                
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ {file_path}: {e}")

    def fix_all_imports(self):
        """–í–∏–ø—Ä–∞–≤–∏—Ç–∏ —ñ–º–ø–æ—Ä—Ç–∏ –≤ —É—Å—ñ—Ö Python —Ñ–∞–π–ª–∞—Ö"""
        print("üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤...")
        
        # –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ .py —Ñ–∞–π–ª–∏
        python_files = []
        
        # –§–∞–π–ª–∏ –≤ –∫–æ—Ä–µ–Ω—ñ
        for file_path in self.base_path.glob('*.py'):
            python_files.append(file_path)
        
        # –§–∞–π–ª–∏ –≤ –ø—ñ–¥–ø–∞–ø–∫–∞—Ö
        for subdir in ['tests', 'demos', 'scripts']:
            subdir_path = self.base_path / subdir
            if subdir_path.exists():
                for file_path in subdir_path.glob('*.py'):
                    python_files.append(file_path)
        
        # –í–∏–ø—Ä–∞–≤–∏—Ç–∏ —ñ–º–ø–æ—Ä—Ç–∏ –≤ –∫–æ–∂–Ω–æ–º—É —Ñ–∞–π–ª—ñ
        for file_path in python_files:
            self.fix_imports_in_file(file_path)

    def create_init_files(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ __init__.py —Ñ–∞–π–ª–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–∞–∫–µ—Ç—ñ–≤"""
        print("üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è __init__.py —Ñ–∞–π–ª—ñ–≤...")
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ __init__.py –≤ –æ—Å–Ω–æ–≤–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è—Ö
        init_dirs = ['tests', 'demos']
        
        for dir_name in init_dirs:
            init_file = self.base_path / dir_name / '__init__.py'
            init_file.write_text('# NIMDA module\n')
            print(f"   üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ: {dir_name}/__init__.py")

    def create_updated_scripts(self):
        """–û–Ω–æ–≤–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç–∏ –∑–∞–ø—É—Å–∫—É –∑ –Ω–æ–≤–∏–º–∏ —à–ª—è—Ö–∞–º–∏"""
        print("üìú –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç—ñ–≤ –∑–∞–ø—É—Å–∫—É...")
        
        scripts_dir = self.base_path / 'scripts'
        
        # –û–Ω–æ–≤–∏—Ç–∏ start_nimda_tkinter.sh
        start_script = scripts_dir / 'start_nimda_tkinter.sh'
        if start_script.exists():
            content = start_script.read_text()
            # –í–∏–ø—Ä–∞–≤–∏—Ç–∏ —à–ª—è—Ö –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
            updated_content = content.replace(
                'python3 nimda_tkinter.py',
                'python3 ../nimda_tkinter.py'
            )
            start_script.write_text(updated_content)
            print("   üîß –û–Ω–æ–≤–ª–µ–Ω–æ: start_nimda_tkinter.sh")

    def create_project_summary(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ —Ä–µ–æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó"""
        summary_file = self.base_path / 'REORGANIZATION_SUMMARY.md'
        
        summary_content = f"""# NIMDA Project Reorganization Summary

## üìÖ –î–∞—Ç–∞ —Ä–µ–æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó: {os.popen('date').read().strip()}

## üóÇÔ∏è –ù–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É:

### üìÅ –ö–æ—Ä—ñ–Ω—å (–≤–∞–∂–ª–∏–≤—ñ —Ñ–∞–π–ª–∏):
{chr(10).join(f'- {f}' for f in self.root_files)}

### üìÅ scripts/ (—Å–∫—Ä–∏–ø—Ç–∏ –∑–∞–ø—É—Å–∫—É):
{chr(10).join(f'- {f}' for f in self.new_structure.get('scripts', []))}

### üìÅ docs/ (–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è):
{chr(10).join(f'- {f}' for f in self.new_structure.get('docs', []))}

### üìÅ tests/ (—Ç–µ—Å—Ç–∏):
{chr(10).join(f'- {f}' for f in self.new_structure.get('tests', []))}

### üìÅ demos/ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó):
{chr(10).join(f'- {f}' for f in self.new_structure.get('demos', []))}

### üìÅ configs/ (–∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó):
{chr(10).join(f'- {f}' for f in self.new_structure.get('configs', []))}

### üìÅ data/ (–±–∞–∑–∏ –¥–∞–Ω–∏—Ö):
{chr(10).join(f'- {f}' for f in self.new_structure.get('data', []))}

## üîß –í–∏–∫–æ–Ω–∞–Ω—ñ –¥—ñ—ó:

1. ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –≤ `backup_before_reorganize/`
2. ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
3. ‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —Ñ–∞–π–ª–∏ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –ø–∞–ø–∫–∏
4. ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —ñ–º–ø–æ—Ä—Ç–∏ –≤ Python —Ñ–∞–π–ª–∞—Ö
5. ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ __init__.py —Ñ–∞–π–ª–∏
6. ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç–∏ –∑–∞–ø—É—Å–∫—É

## üöÄ –ó–∞–ø—É—Å–∫ –ø—ñ—Å–ª—è —Ä–µ–æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó:

```bash
# –ó –∫–æ—Ä–µ–Ω—è –ø—Ä–æ–µ–∫—Ç—É:
python3 nimda_tkinter.py

# –ê–±–æ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç:
./scripts/start_nimda_tkinter.sh

# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è:
python3 -m pytest tests/

# –î–µ–º–æ:
python3 demos/nimda_complete_demo.py
```

## üîÑ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ):

```bash
# –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∑ backup
rm -rf scripts docs tests demos configs data
cp -r backup_before_reorganize/* .
```

## üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞:

–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —ñ–º–ø–æ—Ä—Ç–∞–º–∏ –∞–±–æ –∑–∞–ø—É—Å–∫–æ–º, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ:
1. sys.path –≤ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª–∞—Ö
2. –®–ª—è—Ö–∏ –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö –∑–∞–ø—É—Å–∫—É
3. –ü—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —ñ–º–ø–æ—Ä—Ç—ñ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–æ–¥—É–ª—è—Ö
"""
        
        summary_file.write_text(summary_content)
        print("üìã –°—Ç–≤–æ—Ä–µ–Ω–æ –∑–≤—ñ—Ç: REORGANIZATION_SUMMARY.md")

    def run_reorganization(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–≤–Ω—É —Ä–µ–æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é"""
        print("üöÄ –ü–û–ß–ê–¢–û–ö –†–ï–û–†–ì–ê–ù–Ü–ó–ê–¶–Ü–á –ü–†–û–ï–ö–¢–£ NIMDA")
        print("=" * 50)
        
        try:
            # –û—Å–Ω–æ–≤–Ω—ñ –µ—Ç–∞–ø–∏
            self.create_backup()
            self.create_directories()
            self.move_files()
            self.fix_all_imports()
            self.create_init_files()
            self.create_updated_scripts()
            self.create_project_summary()
            
            print("\n" + "=" * 50)
            print("üéâ –†–ï–û–†–ì–ê–ù–Ü–ó–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–Ü–®–ù–û!")
            print("=" * 50)
            print("üìÅ –ù–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞")
            print("üîß –Ü–º–ø–æ—Ä—Ç–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ")
            print("üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞")
            print("üìã –ó–≤—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: REORGANIZATION_SUMMARY.md")
            print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:")
            print("   python3 nimda_tkinter.py")
            print("   –∞–±–æ ./scripts/start_nimda_tkinter.sh")
            
        except Exception as e:
            print(f"\n‚ùå –ü–û–ú–ò–õ–ö–ê –ü–†–ò –†–ï–û–†–ì–ê–ù–Ü–ó–ê–¶–Ü–á: {e}")
            print("üì¶ –í—ñ–¥–Ω–æ–≤—ñ—Ç—å –∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ")
            raise

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    # –û—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    print("üõ°Ô∏è NIMDA Project Reorganization Tool")
    print("=" * 40)
    print(f"üìç –†–æ–±–æ—á–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {current_dir}")
    
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    response = input("\n‚ö†Ô∏è  –¶–µ —Ä–µ–æ—Ä–≥–∞–Ω—ñ–∑—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç—É. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/N): ")
    if response.lower() not in ['y', 'yes', '—Ç–∞–∫', '—Ç']:
        print("‚ùå –†–µ–æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        return
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–µ–æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é
    reorganizer = NIMDAReorganizer(current_dir)
    reorganizer.run_reorganization()

if __name__ == "__main__":
    main()
